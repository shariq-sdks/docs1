type: object
properties:
  resultCode:
    type: string
    description: The code which represents the result of the API call.
  resultMessage:
    type: string
    description: A short message which explains the result of the API call.
  action:
    type: string
    enum:
      - INTERNAL_SERVER_ERROR
      - BAD_REQUEST
      - UNAUTHORIZED
      - FORBIDDEN
      - OK
    description: The next action that the authorization server implementation should take.
  responseContent:
    type: string
    description: |
      The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
  clientId:
    type: integer
    format: int64
    description: The client ID.
  clientIdAlias:
    type: string
    description: |
      The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
      Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
  clientIdAliasUsed:
    type: boolean
    description: |
      The flag which indicates whether the client ID alias was used when the token request was made.
      `true` if the client ID alias was used when the token request was made.
  expiresAt:
    type: integer
    format: int64
    description: |
      The time at which the access token expires.
      The value is represented in milliseconds since the Unix epoch (1970-01-01).
  subject:
    type: string
    description: |
      The subject who is associated with the access token.
      The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
  scopes:
    type: array
    items:
      type: string
    description: |
      The scopes covered by the access token.
  existent:
    type: boolean
    description: |
      `true` if the access token exists.
  usable:
    type: boolean
    description: |
      true` if the access token is usable (= exists and has not expired).
  sufficient:
    type: boolean
    description: |
      `true` if the access token exists.
  refreshable:
    type: boolean
    description: |
      `true` if the access token can be refreshed using the associated refresh token which had been issued
      along with the access token. `false` if the refresh token for the access token has expired or the access
      token has no associated refresh token.
  properties:
    type: array
    items:
      $ref: ../property.yaml
    description: The extra properties associated with the access token.
  certificateThumbprint:
    type: string
    description: |
      The client certificate thumbprint used to validate the access token.
  resources:
    type: array
    items:
      type: string
    description: |
      The target resources. This represents the resources specified by the `resource` request parameters
      or by the `resource` property in the request object.

      See "Resource Indicators for OAuth 2.0" for details.
  accessTokenResources:
    type: array
    items:
      type: string
    description: |
      The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.

      In some flows, the initial request and the subsequent token request are sent to different endpoints.
      Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
      In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
      The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
      set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
      `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.

      See "Resource Indicators for OAuth 2.0" for details.
  authorizationDetails:
    $ref: ../authorization_details.yaml
  serviceAttributes:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      The attributes of this service that the client application belongs to.
  clientAttributes:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      The attributes of the client.
  scopeDetails:
    type: array
    items:
      $ref: ../scope.yaml
    description: |
      The scopes property of this class is a list of scope names. The property does not hold information
      about scope attributes. This scopeDetails property was newly created to convey information about
      scope attributes.
  grantId:
    type: string
    description: |
      The value of the `grant_id` request parameter of the device authorization request.

      The `grant_id` request parameter is defined in
      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
      , which is supported by Authlete 2.3 and newer versions.
  grant:
    $ref: ../grant.yaml
  forExternalAttachment:
    type: boolean
    description: |
      the flag which indicates whether the access token is for an external
      attachment.
  consentedClaims:
    type: array
    items:
      type: string
    description: |
      the claims that the user has consented for the client application
      to know.
  grantType:
    $ref: ../grant_type.yaml
  acr:
    type: string
    description: |
      The Authentication Context Class Reference of the user authentication that the authorization server performed 
      during the course of issuing the access token.
  authTime:
    type: integer
    format: int64
    description: |
      The time when the user authentication was performed during the course of issuing the access token.
  clientEntityId:
    type: string
    description: |
      The entity ID of the client.
  clientEntityIdUsed:
    type: boolean
    description: |
      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
  forCredentialIssuance:
    type: boolean
    description: The flag indicating whether the token is for credential issuance.
  cNonce:
    type: string
    description: The c_nonce
  cNonceExpiresAt:
    type: integer
    format: int64
    description: The time at which the `c_nonce` expires.
  issuableCredentials:
    type: string
    description: The credentials that can be obtained by presenting the access token.
  dpopNonce:
    type: string
    description: |
      The expected nonce value for DPoP proof JWT, which should be used
      as the value of the `DPoP-Nonce` HTTP header.
