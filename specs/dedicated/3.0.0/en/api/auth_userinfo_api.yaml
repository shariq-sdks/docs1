post:
  summary: /api/auth/userinfo API
  description: |
    This API gathers information about a user.

    <br>
    <details>
    <summary>Description</summary>

    This API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
    of the authorization server in order to get information about the user that is associated with
    an access token.

    The response from `/auth/userinfo` API has various parameters. Among them, it is `action` parameter
    that the authorization server implementation should check first because it denotes the next action
    that the authorization server implementation should take. According to the value of `action`, the
    service implementation must take the steps described below.

    **INTERNAL_SERVER_ERROR**

    When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
    server implementation was wrong or that an error occurred in Authlete. In either case, from the
    viewpoint of the client application, it is an error on the server side. Therefore, the service
    implementation should generate a response to the client application with HTTP status of "500 Internal
    Server Error".

    The value of `responseContent` is a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
    (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent`
    as the value of`WWW-Authenticate` header.

    The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
    1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
    Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

    ```
    HTTP/1.1 500 Internal Server Error
    WWW-Authenticate: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **BAD_REQUEST**

    When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
    does not contain an access token (= the request from the authorization server implementation to
    Authlete does not contain `token` parameter).

    The value of `responseContent` is a string which describes the error in the format
    of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the
    userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
    header.

    The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
    1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
    Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

    ```
    HTTP/1.1 400 Bad Request
    WWW-Authenticate: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **UNAUTHORIZED**

    When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has
    expired, or is not associated with any subject (= any user account).

    The value of `responseContent` is a string which describes the error in the format of [RFC
    6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
    endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
    header.

    The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
    1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
    Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

    ```
    HTTP/1.1 401 Unauthorized
    WWW-Authenticate: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **FORBIDDEN**

    When the value of `action` is `FORBIDDEN`, it means that the access token does not include the
    `openid` scope.

    The value of `responseContent` is a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
    (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent`
    as the value of`WWW-Authenticate` header.

    The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
    1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
    Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

    ```
    HTTP/1.1 403 Forbidden
    WWW-Authenticate: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **OK**

    When the value of `action` is `OK`, it means that the access token which the client application
    presented is valid. To be concrete, it means that the access token exists, has not expired, includes
    the openid scope, and is associated with a subject (= a user account).

    What the userinfo endpoint implementation should do next is to collect information about the subject
    (user) from your database. The value of the `subject` is contained in the subject parameter in the
    response from this API and the names of data, i.e., the claims names are contained in the claims
    parameter in the response. For example, if the `subject` parameter is `joe123` and the claims
    parameter is `[ "given_name", "email" ]`, you need to extract information about joe123's given name
    and email from your database.

    Then, call Authlete's `/auth/userinfo/issue` API with the collected information and the access token
    in order to make Authlete generate an ID token.

    If an error occurred during the above steps, generate an error response to the client. The response
    should comply with [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750). For example, if the
    subject associated with the access token does not exist in your database any longer, you may feel
    like generating a response like below.

    ```
    HTTP/1.1 400 Bad Request
    WWW-Authenticate: Bearer error="invalid_token",
     error_description="The subject associated with the access token does not exist."
    Cache-Control: no-store
    Pragma: no-cache
    ```

    Also, an error might occur on database access. If you treat the error as an internal server error,
    then the response would be like the following.

    ```
    HTTP/1.1 500 Internal Server Error
    WWW-Authenticate: Bearer error="server_error",
     error_description="Failed to extract information about the subject from the database."
    Cache-Control: no-store
    Pragma: no-cache
    ```
    </details>

  security:
    - AccessToken: []
  parameters:
    - in: path
      name: serviceApiKey
      description: serviceApiKey
      required: true
      schema:
        type: string
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../model/request/userinfo_request.yaml
        example:
          token: Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI
      application/x-www-form-urlencoded:
        schema:
          $ref: ../model/request/userinfo_request.yaml
  responses:
    '200':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/userinfo_response.yaml
          example:
            {
              "resultCode": "A091001",
              "resultMessage": "[A091001] The access token presented at the userinfo endpoint is valid.",
              "action": "OK",
              "clientId": "15518267821",
              "clientIdAliasUsed": false,
              "scopes": [ "openid" ],
              "subject": "john",
              "token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI"
            }
    '400':
      $ref: ../model/response/400.yaml
    '401':
      $ref: ../model/response/401.yaml
    '403':
      $ref: ../model/response/403.yaml
    '500':
      $ref: ../model/response/500.yaml
  operationId: 'auth_userinfo_api'
  x-code-samples:
    - lang: shell
      label: curl
      source: |
        curl -v -X POST https://api.authlete.com/api/auth/userinfo \
        -H 'Content-Type:application/json' \
        -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
        -d '{ "token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI" }'

    - lang: java
      label: java
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        UserInfoRequest req = new UserInfoRequest();
        req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

        api.userinfo(req);

    - lang: cs
      label: C#
      source: |
        IAuthleteConfiguration conf = ...;
        IAuthleteApi api = new AuthleteApi(conf);

        UserInfoRequest req = new UserInfoRequest();
        req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI";

        await api.Userinfo(req);

    - lang: php
      label: PHP
      source: |
        $conf = ...;
        $api = new AuthleteApiImpl($conf);

        $req = new UserInfoRequest();
        $req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

        $api.userinfo($req);

    - lang: ruby
      source: |
        conf = ...
        api = Authlete::Api.new(conf)

        req = Authlete::Model::Request::UserInfoRequest.new
        req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

        api.user_info(req)

    - lang: python
      source: |
        conf = ...
        api = AuthleteApiImpl(conf)

        req = UserInfoRequest()
        req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

        api.userinfo(req)

    - lang: go
      source: |
        conf := ...
        api := api.New(&conf)

        req := dto.UserInfoRequest{}
        req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI"

        api.Userinfo(&req)

    - lang: ts
      label: deno
      source: |
        const conf: AuthleteConfiguration = ...;
        const api: AuthleteApi = new AuthleteApiImpl(conf);

        const req = new UserInfoRequest();
        req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI';

        await api.userInfo(req);
  tags:
    - UserInfo Endpoint
