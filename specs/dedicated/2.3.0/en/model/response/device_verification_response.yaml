type: object
properties:
  resultCode:
    type: string
    description: The code which represents the result of the API call.
  resultMessage:
    type: string
    description: A short message which explains the result of the API call.
  action:
    type: string
    enum:
      - INTERNAL_SERVER_ERROR
      - NOT_EXIST
      - EXPIRED
      - VALID
    description: The next action that the authorization server implementation should take.
  clientId:
    type: integer
    format: int64
    description: |
      The client ID of the client application to which the user code has been issued.
  clientIdAlias:
    type: string
    description: |
      The client ID alias of the client application to which the user code has been issued.
  clientIdAliasUsed:
    type: boolean
    description: |
      `true` if the value of the `client_id` request parameter included in the device authorization
      request is the client ID alias. `false` if the value is the original numeric client ID.
  clientName:
    type: string
    description: |
      The name of the client application to which the user code has been issued.
  scopes:
    type: array
    items:
      $ref: ../scope.yaml
    description: |
      The scopes requested by the device authorization request.

      Note that `description` property and `descriptions` property of each scope object in
      the array contained in this property is always null even if descriptions of the scopes
      are registered.
  claimNames:
    type: array
    items:
      type: string
    description: |
      The names of the claims which were requested indirectly via some special scopes.
      See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
      in OpenID Connect Core 1.0 for details.

      This property is always `null` if the `scope` request parameter of the device authorization
      request does not include the `openid` scope even if special scopes (such as `profile`)
      are included in the request (unless the openid scope is included in the default set
      of scopes which is used when the `scope` request parameter is omitted).
  acrs:
    type: array
    items:
      type: string
    description: |
      The list of ACR values requested by the device authorization request.
  resources:
    type: array
    items:
      type: string
    description: |
      The resources specified by the `resource` request parameters or by the `resource` property
      in the request object. If both are given, the values in the request object should be
      set. See "Resource Indicators for OAuth 2.0" for details.
  authorizationDetails:
    $ref: ../authorization_details.yaml
  serviceAttributes:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      The attributes of this service that the client application belongs to.
  clientAttributes:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      The attributes of the client.
  dynamicScopes:
    type: array
    items:
      $ref: ../dynamic_scope.yaml
    description: |
      The dynamic scopes which the client application requested by the scope request parameter.
  expiresAt:
    type: integer
    format: int64
    description: |
      Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
  gmAction:
    $ref: ../grant_management_action.yaml
  grantId:
    type: string
    description: |
      the value of the `grant_id` request parameter of the device authorization request.

      The `grant_id` request parameter is defined in
      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
      , which is supported by Authlete 2.3 and newer versions.
  grant:
    $ref: ../grant.yaml
  grantSubject:
    type: string
    description: |
      The subject identifying the user who has given the grant identified
      by the `grant_id` request parameter of the device authorization
      request.

      Authlete 2.3 and newer versions support <a href=
      "https://openid.net/specs/fapi-grant-management.html">Grant Management
      for OAuth 2.0</a>. An authorization request may contain a {@code grant_id}
      request parameter which is defined in the specification. If the value of
      the request parameter is valid, {@link #getGrantSubject()} will return
      the subject of the user who has given the grant to the client application.
      Authorization server implementations may use the value returned from
      {@link #getGrantSubject()} in order to determine the user to authenticate.

      The user your system will authenticate during the authorization process
      (or has already authenticated) may be different from the user of the
      grant. The first implementer's draft of "Grant Management for OAuth 2.0"
      does not mention anything about the case, so the behavior in the case is
      left to implementations. Authlete will not perform the grant management
      action when the {@code subject} passed to Authlete does not match the
      user of the grant.
  clientEntityId:
    type: string
    description: |
      The entity ID of the client.
  clientEntityIdUsed:
    type: boolean
    description: |
      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.