type: object
properties:
  resultCode:
    type: string
    description: The code which represents the result of the API call.
  resultMessage:
    type: string
    description: A short message which explains the result of the API call.
  action:
    type: string
    enum:
      - INTERNAL_SERVER_ERROR
      - BAD_REQUEST
      - UNAUTHORIZED
      - USER_IDENTIFICATION
    description: The next action that the authorization server implementation should take.
  responseContent:
    type: string
    description: |
      The content that the authorization server implementation is to return to the client
      application. Its format varies depending on the value of `action` parameter.
  clientId:
    type: integer
    format: int64
    description: |
      The client ID of the client application that has made the backchannel authentication
      request.
  clientIdAlias:
    type: string
    description: |
      The client ID alias of the client application that has made the backchannel authentication
      request.
  clientIdAliasUsed:
    type: boolean
    description: |
      `true` if the value of the client_id request parameter included in the backchannel
      authentication request is the client ID alias. `false` if the value is the original
      numeric client ID.
  clientName:
    type: string
    description: |
      The name of the client application which has made the backchannel authentication request.
  scopes:
    type: array
    items:
      $ref: ../scope.yaml
    description: |
      The scopes requested by the backchannel authentication request.

      Basically, this property holds the value of the `scope` request parameter in the backchannel
      authentication request. However, because unregistered scopes are dropped on Authlete side,
      if the `scope` request parameter contains unknown scopes, the list returned by this
      property becomes different from the value of the `scope` request parameter.

      Note that `description` property and `descriptions` property of each `scope` object
      in the array contained in this property is always null even if descriptions of the scopes
      are registered.
  claimNames:
    type: array
    items:
      type: string
    description: |
      The names of the claims which were requested indirectly via some special scopes.
      See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
      in OpenID Connect Core 1.0 for details.
  clientNotificationToken:
    type: string
    description: |
      The client notification token included in the backchannel authentication request.
  acrs:
    type: array
    items:
      type: string
    description: |
       The list of ACR values requested by the backchannel authentication request.

       Basically, this property holds the value of the `acr_values` request parameter in the
       backchannel authentication request. However, because unsupported ACR values are dropped
       on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
       the list returned by this property becomes different from the value of the `acr_values`
       request parameter.
  hintType:
    type: string
    description: |
      The type of the hint for end-user identification which was included in the backchannel authentication request.
  hint:
    type: string
    description: |
      The value of the hint for end-user identification.
  sub:
    type: string
    description: |
      The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
  bindingMessage:
    type: string
    description: |
      The binding message included in the backchannel authentication request.
  userCode:
    type: string
    description: |
      The binding message included in the backchannel authentication request.
  userCodeRequired:
    type: boolean
    description: |
      The flag which indicates whether a user code is required.

      `true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
      `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
      metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
      are `true`.
  requestedExpiry:
    type: integer
    format: int32
    description: |
      The requested expiry for the authentication request ID (`auth_req_id`).
  requestContext:
    type: string
    description: |
      The request context of the backchannel authentication request.

      It is the value of the request_context claim in the signed authentication request and
      its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
  warnings:
    type: array
    items:
      type: string
    description: |
      The warnings raised during processing the backchannel authentication request.
  ticket:
    type: string
    description: |
      The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.

      This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
  resources:
    type: array
    items:
      type: string
    description: |
      The resources specified by the `resource` request parameters or by the `resource` property
      in the request object. If both are given, the values in the request object should be
      set. See "Resource Indicators for OAuth 2.0" for details.
  authorizationDetails:
    $ref: ../authorization_details.yaml
  serviceAttributes:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      The attributes of this service that the client application belongs to.
  clientAttributes:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      The attributes of the client.
  dynamicScopes:
    type: array
    items:
      $ref: ../dynamic_scope.yaml
    description: |
      The dynamic scopes which the client application requested by the scope request parameter.
  deliveryMode:
    $ref: ../delivery_mode.yaml