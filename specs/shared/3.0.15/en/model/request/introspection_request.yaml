type: object
required: [token]
properties:
  token:
    type: string
    description: An access token to introspect.
  scopes:
    type: array
    items:
      type: string
    description: |
      A string array listing names of scopes which the caller (= a protected resource endpoint of the
      service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
      the format of `scopes` is a space-separated list of scope names.

      If this parameter is a non-empty array and if it contains a scope which is not covered by the
      access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
  subject:
    type: string
    description: |
      A subject (= a user account managed by the service) whom the caller (= a protected resource
      endpoint of the service) requires.

      If this parameter is not `null` and if the value does not match the subject who is associated
      with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
  clientCertificate:
    type: string
    description: |
      Client certificate in PEM format, used to validate binding against access tokens using the TLS
      client certificate confirmation method.
  dpop:
    type: string
    description: |
      `DPoP` header presented by the client during the request to the resource server.

      The header contains a signed JWT which includes the public key that is paired with the private
      key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
      Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
  htm:
    type: string
    description: |
      HTTP method of the request from the client to the protected resource endpoint. This field is
      used to validate the `DPoP` header.

      See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
      for details.
  htu:
    type: string
    description: |
      URL of the protected resource endpoint. This field is used to validate the `DPoP` header.

      See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
      for details.
  resources:
    type: array
    items:
      type: string
    description: |
      The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
  acrValues:
    type: array
    items:
      type: string
    description: |
      Authentication Context Class Reference values one of which the user authentication performed during the course
      of issuing the access token must satisfy.
  maxAge:
    type: integer
    format: int64
    description: |
      The maximum authentication age which is the maximum allowable elapsed time since the user authentication
      was performed during the course of issuing the access token.
  requiredComponents:
    type: array
    items:
      type: string
    description: |
      HTTP Message Components required to be in the signature. If absent, defaults to [ "@method", "@target-uri", "authorization" ].
  uri:
    type: string
    description: |
      The full URL of the userinfo endpoint.
  message:
    type: string
    description: |
      The HTTP message body of the request, if present.
  headers:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      HTTP headers to be included in processing the signature. If this is a signed request, this must include the
      Signature and Signature-Input headers, as well as any additional headers covered by the signature.
  targetUri:
    type: string
    description: |
      The target URI of the resource request, including the query part, if any.

      This parameter is used as the value of the @target-uri derived component for HTTP message signatures
      [RFC 9421 HTTP Message Signatures, Section 2.2.2. Target URI](https://www.rfc-editor.org/rfc/rfc9421.html#section-2.2.2)).
      Additionally, other derived components such as `@authority`, `@scheme`, `@path`, `@query` and
      `@query-param` are computed from this parameter.

      When this parameter is omitted, the value of the `htu` parameter is used. The `htu` parameter
      represents the URL of the resource endpoint, which is identical to the target URI of the resource
      request as long as the request does not include a query component. Conversely, if the resource
      request includes a query component, the value of the `htu` parameter will not match the target
      URI, and in that case, the HTTP message signature verification will fail.

      If neither this `targetUri` parameter nor the `htu` parameter is specified, the target URI is
      considered unavailable. If HTTP message signing requires the target-uri derived component or
      other derived components computed based on the target URI, the HTTP message signature verification
      will fail.
  dpopNonceRequired:
    type: boolean
    description: |
      The flag indicating whether to check if the DPoP proof JWT includes the expected `nonce` value.

      If this request parameter is set to `true` or if the service's `dpopNonceRequired` property is
      set to `true`, the `/auth/introspection` API checks if the DPoP proof JWT includes the expected
      `nonce` value. In this case, the response from the `/auth/introspection` API will include the
      `dpopNonce` response parameter, which should be used as the value of the DPoP-Nonce HTTP header.
  requestBodyContained:
    type: boolean
    description: |
      The flag indicating whether the resource request contains a request body.

      When the resource request must comply with the HTTP message signing requirements defined in the
      FAPI 2.0 Message Signing specification, the `"content-digest"` component identifier must be included
      in the signature base of the HTTP message signature (see [RFC 9421 HTTP Message Signatures](https://www.rfc-editor.org/rfc/rfc9421.html))
      if the resource request contains a request body.

      When this `requestBodyContained` parameter is set to `true`, Authlete checks whether `"content-digest"`
      is included in the signature base, if the FAPI profile applies to the resource request.
