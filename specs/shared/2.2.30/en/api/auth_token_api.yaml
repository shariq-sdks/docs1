post:
  summary: /api/auth/token API
  description: |
    This API parses request parameters of an authorization request and returns necessary data for the
    authorization server implementation to process the authorization request further.

    <br>
    <details>
    <summary>Description</summary>

    This API is supposed to be called from with the implementation of the token endpoint of the service.
    The endpoint implementation must extract the request parameters from the token request from the
    client application and pass them as the value of parameters request parameter to Authlete's `/auth/token` API.
    The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
    of the token request.

    In addition, if the token endpoint of the authorization server implementation supports basic authentication
    as a means of [client authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3),
    the client credentials must be extracted from `Authorization` header and they must be passed as
    `clientId` request parameter and `clientSecret` request parameter to Authlete's `/auth/token` API.

    The following code snippet is an example in JAX-RS showing how to extract request parameters from
    the token request and client credentials from Authorization header.

    ```java
    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public Response post(
            @HeaderParam(HttpHeaders.AUTHORIZATION) String auth,
            String parameters)
    {
        // Convert the value of Authorization header (credentials of
        // the client application), if any, into BasicCredentials.
        BasicCredentials credentials = BasicCredentials.parse(auth);

        // The credentials of the client application extracted from
        // 'Authorization' header. These may be null.
        String clientId     = credentials == null ? null
                            : credentials.getUserId();
        String clientSecret = credentials == null ? null
                            : credentials.getPassword();

        // Process the given parameters.
        return process(parameters, clientId, clientSecret);
    }
    ```

    The response from `/auth/token` API has some parameters. Among them, it is action parameter that
    the service implementation should check first because it denotes the next action that the authorization
    server implementation should take. According to the value of action, the authorization server
    implementation must take the steps described below.

    **INTERNAL_SERVER_ERROR**

    When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
    server implementation was wrong or that an error occurred in Authlete.
    In either case, from the viewpoint of the client application, it is an error on the server side.
    Therefore, the service implementation should generate a response to the client application with
    HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content
    type although OAuth 2.0 specification does not mention the format of the error response when the
    redirect URI is not usable.

    The value of `responseContent` is a JSON string which describes the error, so it can be
    used as the entity body of the response.

    The following illustrates the response which the service implementation should generate and return
    to the client application.

    ```
    HTTP/1.1 500 Internal Server Error
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    The endpoint implementation may return another different response to the client application
    since "500 Internal Server Error" is not required by OAuth 2.0.


    **INVALID_CLIENT**

    When the value of `action` is `INVALID_CLIENT`, it means that authentication of the client failed.
    In this case, the HTTP status of the response to the client application is either "400 Bad Request"
    or "401 Unauthorized". This requirement comes from [RFC 6749, 5.2. Error Response](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2).
    The description about `invalid_client` shown below is an excerpt from RFC 6749.

    Client authentication failed (e.g., unknown client, no client authentication included, or unsupported
    authentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code
    to indicate which HTTP authentication schemes are supported. If the client attempted to authenticate
    via the `Authorization` request header field, the authorization server MUST respond with an HTTP
    401 (Unauthorized) status code and include the `WWW-Authenticate` response header field matching
    the authentication scheme used by the client.

    In either case, the value of `responseContent` is a JSON string which can be used as the entity
    body of the response to the client application.

    The following illustrate responses which the service implementation must generate and return to
    the client application.

    ```
    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    <br>

    ```
    HTTP/1.1 401 Unauthorized
    WWW-Authenticate: {challenge}
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    **BAD_REQUEST**

    When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
    is invalid.

    A response with HTTP status of "400 Bad Request" must be returned to the client application and
    the content type must be `application/json`.

    The value of `responseContent` is a JSON string which describes the error, so it can be used as
    the entity body of the response.

    The following illustrates the response which the service implementation should generate and return
    to the client application.

    ```
    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    **OK**

    When the value of `action` is `OK`, it means that the request from the client application is valid
    and an access token, and optionally an ID token, is ready to be issued.

    The HTTP status of the response returned to the client application must be "200 OK" and the content
    type must be `application/json`.

    The value of `responseContent` is a JSON string which contains an access token (and optionally
    an ID token), so it can be used as the entity body of the response.

    The following illustrates the response which the service implementation must generate and return
    to the client application.

    ```
    HTTP/1.1 200 OK
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```
    </details>

  security:
    - ServiceCredentials: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../model/request/token_request.yaml
        example:
          parameters: grant_type=authorization_code&code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
          clientId: "26478243745571"
          clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
      application/x-www-form-urlencoded:
        schema:
          $ref: ../model/request/token_request.yaml
  responses:
    '200':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/token_response.yaml
          example:
            {
              "resultCode": "A050001",
              "resultMessage": "[A050001] The token request (grant_type=authorization_code) was processed successfully.",
              "accessToken": "C4SrUTijIj2IxqE1xBASr3dxQWgso3BpY49g8CyjGjQ",
              "accessTokenDuration": 3600,
              "accessTokenExpiresAt": 1640252942736,
              "action": "OK",
              "clientAttributes": [
                {
                  "key": "attribute1-key",
                  "value": "attribute1-value"
                },
                {
                  "key": "attribute2-key",
                  "value": "attribute2-value"
                }
              ],
              "clientId": 26478243745571,
              "clientIdAlias": "my-client",
              "clientIdAliasUsed": false,
              "grantType": "AUTHORIZATION_CODE",
              "refreshToken": "60k0cZ38sJcpTgdxvG9Sqa-3RG5AmGExGpFB-1imSxo",
              "refreshTokenDuration": 3600,
              "refreshTokenExpiresAt": 1640252942736,
              "responseContent": "{\\\"access_token\\\":\\\"C4SrUTijIj2IxqE1xBASr3dxQWgso3BpY49g8CyjGjQ\\\",\\\"refresh_token\\\":\\\"60k0cZ38sJcpTgdxvG9Sqa-3RG5AmGExGpFB-1imSxo\\\",\\\"scope\\\":\\\"history.read timeline.read\\\",\\\"token_type\\\":\\\"Bearer\\\",\\\"expires_in\\\":3600}",
              "scopes": [
                "history.read",
                "timeline.read"
              ],
              "serviceAttributes": [
                {
                  "key": "attribute1-key",
                  "value": "attribute1-value"
                },
                {
                  "key": "attribute2-key",
                  "value": "attribute2-value"
                }
              ],
              "subject": "john"
            }
    '400':
      $ref: ../model/response/400.yaml
    '401':
      $ref: ../model/response/401.yaml
    '403':
      $ref: ../model/response/403.yaml
    '500':
      $ref: ../model/response/500.yaml
  operationId: 'auth_token_api'
  x-code-samples:
    - lang: shell
      label: curl
      source: |
        curl -v -X POST https://api.authlete.com/api/auth/token \
        -H 'Content-Type: application/json' \
        -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
        -d '{ "parameters": "grant_type=authorization_code&code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk", "clientId": "57297408867", "clientSecret": "J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A" }'

    - lang: java
      label: java
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        TokenRequest req = new TokenRequest();
        req.setParameters(...);
        req.setClientId("57297408867");
        req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

        api.token(req);

    - lang: cs
      label: C#
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        TokenRequest req = new TokenRequest();
        req.setParameters(...);
        req.setClientId("57297408867");
        req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

        api.token(req);

    - lang: php
      label: PHP
      source: |
        $conf = ...;
        $api = new AuthleteApiImpl($conf);

        $req = new TokenRequest();
        $req.setParameters(...);
        $req.setClientId("57297408867");
        $req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

        $api.token($req);

    - lang: ruby
      source: |
        conf = ...
        api = Authlete::Api.new(conf)

        req = Authlete::Model::Request::TokenRequest.new
        req.parameters = '...'
        req.client_id = '57297408867'
        req.client_secret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

        api.token(req)

    - lang: python
      source: |
        conf = ...
        api = AuthleteApiImpl(conf)

        req = TokenRequest()
        req.parameters = ...
        req.clientId = '57297408867'
        req.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

        api.token(req)

    - lang: go
      source: |
        conf := ...
        api := api.New(&conf)

        req := dto.TokenRequest{}
        req.Parameters = ...
        req.ClientId = "57297408867"
        req.ClientSecret = "J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A"

        api.Token(&req)

    - lang: ts
      label: deno
      source: |
        const conf: AuthleteConfiguration = ...;
        const api: AuthleteApi = new AuthleteApiImpl(conf);

        const req = new TokenRequest();
        req.parameters = ...;
        req.clientId = '57297408867';
        req.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A';

        await api.token(req);
  tags:
    - Token Endpoint
