description: ""
content:
  application/json:
    schema:
      allOf:
        - $ref: result.yaml
        - type: object
          properties:
            action:
              type: string
              enum:
                - INTERNAL_SERVER_ERROR
                - BAD_REQUEST
                - LOCATION
                - FORM
                - NO_INTERACTION
                - INTERACTION
              description: The next action that the authorization server implementation should take.
            client:
              allOf:
                - $ref: ../client.yaml
              description: Information about the client application which made the authorization request.
            display:
              allOf:
                - $ref: ../display.yaml
              description: |
                The display mode which the client application requests by `display` request parameter.
                When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.

                It is ensured that the value of `display` is one of the supported display modes which are specified
                by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
                authorization request is not supported, an error is raised.

                Values for this property correspond to the values listed in
                "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
            maxAge:
              type: integer
              format: int32
              description: |
                The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
                of the client application when the authorization request does not contain `max_age` request parameter.

                See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
                for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
                for `defaultMaxAge` configuration parameter.
            service:
              allOf:
                - $ref: ../service.yaml
              description: Information about the service to which the authorization request was made.
            scopes:
              type: array
              items:
                $ref: ../scope.yaml
              description: |
                The scopes that the client application requests. This value comes from `scope` request parameter.
                If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
                If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
                the value of this parameter is `null`.

                It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
                by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
                an error and are just ignored.

                OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.

                | Name | Description |
                | --- | --- |
                | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
                | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
                | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
                | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).<br><br> The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
                | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
                | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). <blockquote>This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).</blockquote>  |

                Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
                when scope request parameter contains `offline_access`. This behavior is a requirement written in
                [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
            uiLocales:
              type: array
              items:
                type: string
              description: |
                The locales that the client application presented as candidates to be used for UI.
                This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
                defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
                See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.

                It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
                by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
                cause an error and are just ignored.
            claimsLocales:
              type: array
              items:
                type: string
              description: |
                End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
                The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
                See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.

                It is ensured that locales listed by this parameters are contained in the list of supported claim locales
                which are specified by `supportedClaimsLocales` configuration parameter of the service.
                Unsupported claim locales in the authorization request do not cause an error and are just ignored.
            claims:
              type: array
              items:
                type: string
              description: |
                The list of claims that the client application requests to be embedded in the ID token.
                The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
                which are expanded to claims.

                See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
                for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
                for the special scopes.
            acrEssential:
              type: boolean
              description: |
                This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
                This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
                the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
            clientIdAliasUsed:
              type: boolean
              description: |
                `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
                `false` if the value is the original numeric client ID.
            acrs:
              type: array
              items:
                type: string
              description: |
                The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
                This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.

                See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
                request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
                default_acr_values" for `defaultAcrs` configuration parameter.
            subject:
              type: string
              description: |
                The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
                The value comes from `sub` claim in `claims` request parameter.
            loginHint:
              type: string
              description: A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
            prompts:
              type: array
              items:
                allOf:
                  - $ref: ../prompt_except_for_none.yaml
                  - $ref: ../prompt_none.yaml
              description:  The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.
            lowestPrompt:
              allOf:
                - $ref: ../prompt_except_for_none.yaml
                - $ref: ../enum_null.yaml
              description: |
                The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.

                When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.

                See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
            requestObjectPayload:
              type: string
              description: |
                The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
            idTokenClaims:
              type: string
              description: |
                The value of the `id_token` property in the claims request parameter or in the claims property in a request object.

                A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
                There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
                In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
                Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).

                The following is an excerpt from the specification.
                You can find `userinfo` and `id_token` are top-level properties.

                ```json
                {
                  "userinfo":
                  {
                    "given_name": { "essential": true },
                    "nickname": null,
                    "email": { "essential": true },
                    "email_verified": { "essential": true },
                    "picture": null,
                    "http://example.info/claims/groups": null
                  },
                  "id_token":
                  {
                    "auth_time": { "essential": true },
                    "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                  }
                }
                ```

                This value of this property is the value of the `id_token` property in JSON format.
                For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.

                ```json
                {
                  "auth_time": { "essential": true },
                  "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                }
                ```

                Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
                this property holds the former value.
            userInfoClaims:
              type: string
              description: |
                The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.

                A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
                There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
                In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
                Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).

                The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.

                ```json
                {
                  "userinfo":
                  {
                    "given_name": { "essential": true },
                    "nickname": null,
                    "email": { "essential": true },
                    "email_verified": { "essential": true },
                    "picture": null,
                    "http://example.info/claims/groups": null
                  },
                  "id_token":
                  {
                    "auth_time": { "essential": true },
                    "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                  }
                }
                ````

                The value of this property is the value of the `userinfo` property in JSON format.
                For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.

                ```json
                {
                  "given_name": { "essential": true },
                  "nickname": null,
                  "email": { "essential": true },
                  "email_verified": { "essential": true },
                  "picture": null,
                  "http://example.info/claims/groups": null
                }
                ```

                Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
                the value of this property holds the former value.
            resources:
              type: string
              description: |
                The resources specified by the `resource` request parameters or by the `resource` property in the request object.
                If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
            authorizationDetails:
              allOf:
                - $ref: ../authorization_details.yaml
              description: |
                The authorization details. This represents the value of the `authorization_details`
                request parameter in the preceding device authorization request which is defined in
                "OAuth 2.0 Rich Authorization Requests".
            purpose:
              type: string
              description: |
                The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
                of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:

                > purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
                If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
            responseContent:
              type: string
              description: |
                The content that the authorization server implementation is to return to the client application.
                Its format varies depending on the value of `action` parameter.
            ticket:
              type: string
              description: |
                A ticket issued by Authlete to the service implementation. This is needed when the service
                implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
                API.
            dynamicScopes:
              type: array
              items:
                $ref: ../dynamic_scope.yaml
              description: |
                The dynamic scopes which the client application requested by the scope request parameter.
    example:
      {
        "type": "authorizationResponse",
        "resultCode": "A004001",
        "resultMessage": "[A004001] Authlete has successfully issued a ticket to the service (API Key = 21653835348762) for the authorization request from the client (ID = 26478243745571). [response_type=code, openid=false]",
        "acrEssential": false,
        "action": "INTERACTION",
        "client": {
          "applicationType": "WEB",
          "attributes": [
            {
              "key": "attribute1-key",
              "value": "attribute1-value"
            },
            {
              "key": "attribute2-key",
              "value": "attribute2-value"
            }
          ],
          "authTimeRequired": false,
          "bcUserCodeRequired": false,
          "clientId": 26478243745571,
          "clientIdAlias": "my-client",
          "clientIdAliasEnabled": true,
          "clientName": "My updated client",
          "clientSecret": "my_updated_client_secret",
          "clientType": "CONFIDENTIAL",
          "createdAt": 1639468356000,
          "defaultMaxAge": 0,
          "derivedSectorIdentifier": "my-client.example.com",
          "developer": "john",
          "dynamicallyRegistered": false,
          "frontChannelRequestObjectEncryptionRequired": false,
          "grantTypes": [
            "AUTHORIZATION_CODE",
            "REFRESH_TOKEN"
          ],
          "idTokenSignAlg": "RS256",
          "modifiedAt": 1639560232000,
          "number": 6164,
          "parRequired": false,
          "redirectUris": [
            "https://my-client.example.com/cb1",
            "https://my-client.example.com/cb2"
          ],
          "requestObjectEncryptionAlgMatchRequired": false,
          "requestObjectEncryptionEncMatchRequired": false,
          "requestObjectRequired": false,
          "responseTypes": [
            "CODE",
            "TOKEN"
          ],
          "serviceNumber": 5041,
          "subjectType": "PUBLIC",
          "tlsClientCertificateBoundAccessTokens": false,
          "tokenAuthMethod": "CLIENT_SECRET_BASIC"
        },
        "clientIdAliasUsed": false,
        "display": "PAGE",
        "maxAge": 0,
        "scopes": [
          {
            "defaultEntry": false,
            "description": "A permission to read your history.",
            "name": "history.read"
          },
          {
            "defaultEntry": false,
            "description": "A permission to read your timeline.",
            "name": "timeline.read"
          }
        ],
        "service": {
          "accessTokenDuration": 3600,
          "accessTokenType": "Bearer",
          "allowableClockSkew": 0,
          "apiKey": 21653835348762,
          "apiSecret": "uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls",
          "attributes": [
            {
              "key": "attribute1-key",
              "value": "attribute1-value"
            },
            {
              "key": "attribute2-key",
              "value": "attribute2-value"
            }
          ],
          "authorizationEndpoint": "https://my-service.example.com/authz",
          "authorizationResponseDuration": 0,
          "backchannelAuthReqIdDuration": 0,
          "backchannelBindingMessageRequiredInFapi": false,
          "backchannelPollingInterval": 0,
          "backchannelUserCodeParameterSupported": false,
          "claimShortcutRestrictive": false,
          "clientIdAliasEnabled": true,
          "clientsPerDeveloper": 0,
          "createdAt": 1639373421000,
          "dcrScopeUsedAsRequestable": false,
          "deviceFlowCodeDuration": 0,
          "deviceFlowPollingInterval": 0,
          "directAuthorizationEndpointEnabled": false,
          "directIntrospectionEndpointEnabled": false,
          "directJwksEndpointEnabled": false,
          "directRevocationEndpointEnabled": false,
          "directTokenEndpointEnabled": false,
          "directUserInfoEndpointEnabled": false,
          "dynamicRegistrationSupported": false,
          "errorDescriptionOmitted": false,
          "errorUriOmitted": false,
          "frontChannelRequestObjectEncryptionRequired": false,
          "grantManagementActionRequired": false,
          "hsmEnabled": false,
          "idTokenDuration": 0,
          "introspectionEndpoint": "https://my-service.example.com/introspection",
          "issSuppressed": false,
          "issuer": "https://my-service.example.com",
          "metadata": [
            {
              "key": "clientCount",
              "value": "1"
            }
          ],
          "missingClientIdAllowed": false,
          "modifiedAt": 1639559308000,
          "mutualTlsValidatePkiCertChain": false,
          "nbfOptional": false,
          "number": 5041,
          "parRequired": false,
          "pkceRequired": true,
          "pkceS256Required": false,
          "pushedAuthReqDuration": 0,
          "refreshTokenDuration": 3600,
          "refreshTokenDurationKept": false,
          "refreshTokenDurationReset": false,
          "refreshTokenKept": false,
          "requestObjectEncryptionAlgMatchRequired": false,
          "requestObjectEncryptionEncMatchRequired": false,
          "requestObjectRequired": false,
          "revocationEndpoint": "https://my-service.example.com/revocation",
          "scopeRequired": false,
          "serviceName": "My updated service",
          "serviceOwnerNumber": 2,
          "singleAccessTokenPerSubject": false,
          "supportedClaimTypes": [
            "NORMAL"
          ],
          "supportedDisplays": [
            "PAGE"
          ],
          "supportedGrantTypes": [
            "AUTHORIZATION_CODE",
            "REFRESH_TOKEN"
          ],
          "supportedIntrospectionAuthMethods": [
            "CLIENT_SECRET_BASIC"
          ],
          "supportedResponseTypes": [
            "CODE"
          ],
          "supportedRevocationAuthMethods": [
            "CLIENT_SECRET_BASIC"
          ],
          "supportedScopes": [
            {
              "defaultEntry": false,
              "description": "A permission to read your history.",
              "name": "history.read"
            },
            {
              "defaultEntry": false,
              "description": "A permission to read your timeline.",
              "name": "timeline.read"
            }
          ],
          "supportedTokenAuthMethods": [
            "CLIENT_SECRET_BASIC"
          ],
          "tlsClientCertificateBoundAccessTokens": false,
          "tokenEndpoint": "https://my-service.example.com/token",
          "tokenExpirationLinked": false,
          "traditionalRequestObjectProcessingApplied": false,
          "unauthorizedOnClientConfigSupported": false,
          "userCodeLength": 0
        },
        "ticket": "hXoY87t_t23enrVHWxpXNP5FfVDhDypD3T6H6lt4IPA"
      }