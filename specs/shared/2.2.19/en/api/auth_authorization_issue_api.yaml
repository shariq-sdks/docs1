post:
  summary: /api/auth/authorization/issue API
  description: |
    This API parses request parameters of an authorization request and returns necessary data for the
    authorization server implementation to process the authorization request further.

    <br>
    <details>
    <summary>Description</summary>

    This API is supposed to be called from within the implementation of the authorization endpoint of
    the service in order to generate a successful response to the client application.

    The description of the `/auth/authorization` API describes the timing when this API should be called
    and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.

    The response from `/auth/authorization/issue` API has some parameters.
    Among them, it is `action` parameter that the authorization server implementation should check first
    because it denotes the next action that the authorization server implementation should take.
    According to the value of `action`, the authorization server implementation must take the steps
    described below.

    **INTERNAL_SERVER_ERROR**

    When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
    server implementation was wrong or that an error occurred in Authlete.
    In either case, from the viewpoint of the client application, it is an error on the server side.
    Therefore, the service implementation should generate a response to the client application with
    HTTP status of "500 Internal Server Error".

    The value of `responseContent` is a JSON string which describes the error, so it can be used as
    the entity body of the response.

    The following illustrates the response which the service implementation should generate and return
    to the client application.

    ```
    HTTP/1.1 500 Internal Server Error
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    The endpoint implementation may return another different response to the client application since
    "500 Internal Server Error" is not required by OAuth 2.0.

    **BAD_REQUEST**

    When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
    or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
    response to the authorization UI.

    The HTTP status of the response returned to the client application should be "400 Bad Request"
    and the content type should be `application/json` although OAuth 2.0 specification does not mention
    the format of the error response.

    The value of `responseContent` is a JSON string which describes the error, so it can be used as
    the entity body of the response.

    The following illustrates the response which the service implementation should generate and return
    to the client application.

    ```
    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    The endpoint implementation may return another different response to the client application since
    "400 Bad Request" is not required by OAuth 2.0.

    **LOCATION**

    When the value of `action` is `LOCATION`, it means that the response to the client application
    should be "302 Found" with `Location` header.

    The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
    token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
    the value of `Location` header.

    The following illustrates the response which the service implementation must generate and return
    to the client application.

    ```
    HTTP/1.1 302 Found
    Location: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **FORM**

    When the value of `action` is `FORM`, it means that the response to the client application should
    be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
    request from the client contains `response_mode=form_post` request parameter.

    The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
    so it can be used as the entity body of the response.

    The following illustrates the response which the service implementation should generate and return
    to the client application.

    ```
    HTTP/1.1 200 OK
    Content-Type: text/html;charset=UTF-8
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```
    </details>
  security:
    - ServiceCredentials: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../model/request/authorization_issue_request.yaml
        example:
          ticket: FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc
          subject: john
      application/x-www-form-urlencoded:
        schema:
          $ref: ../model/request/authorization_issue_request.yaml
  responses:
    '200':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/authorization_issue_response.yaml
          example:
            {
              "resultCode": "A040001",
              "resultMessage": "[A040001] The authorization request was processed successfully.",
              "accessTokenDuration": 0,
              "accessTokenExpiresAt": 0,
              "action": "LOCATION",
              "authorizationCode": "Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo",
              "responseContent": "https://my-client.example.com/cb1?code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&iss=https%3A%2F%2Fmy-service.example.com"
            }

    '400':
      $ref: ../model/response/400.yaml
    '401':
      $ref: ../model/response/401.yaml
    '403':
      $ref: ../model/response/403.yaml
    '500':
      $ref: ../model/response/500.yaml
  operationId: 'auth_authorization_issue_api'
  x-code-samples:
    - lang: shell
      label: curl
      source: |
        curl -v -X POST https://api.authlete.com/api/auth/authorization/issue \
        -H 'Content-Type: application/json' \
        -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
        -d '{ "ticket": "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc", "subject": "john" }'

    - lang: java
      label: java
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        AuthorizationIssueRequest req = new AuthorizationIssueRequest();
        req.setTicket("FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc");
        req.setSubject("john");

        api.authorizationIssue(req);

    - lang: cs
      label: C#
      source: |
        IAuthleteConfiguration conf = new AuthletePropertiesConfiguration();
        IAuthleteApi api = new AuthleteApi(conf);

        AuthorizationIssueRequest req = new AuthorizationIssueRequest();
        req.Ticket  = "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc";
        req.Subject = "john";

        await api.AuthorizationIssue(req);

    - lang: php
      label: PHP
      source: |
        $conf = ...;
        $api = new AuthleteApiImpl($conf);

        $req = new AuthorizationIssueRequest();
        $req.setTicket("FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc");
        $req.setSubject("john");

        $api.authorizationIssue($req);

    - lang: ruby
      source: |
        conf = ...
        api = Authlete::Api.new(conf)

        req = Authlete::Model::Request::AuthorizationIssueRequest.new
        req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc'
        req.subject = 'john'

        api.authorization_issue(req)

    - lang: python
      source: |
        conf = ...
        api = AuthleteApiImpl(conf)

        req = AuthorizationIssueRequest()
        req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc'
        req.subject = 'john'

        api.authorizationIssue(req)

    - lang: go
      source: |
        conf := ...
        api := api.New(&conf)

        req := dto.AuthorizationIssueRequest{}
        req.Ticket = "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc"
        req.Subject = "john"

        api.AuthorizationIssue(&req)

    - lang: ts
      label: deno
      source: |
        const conf: AuthleteConfiguration = ...;
        const api: AuthleteApi = new AuthleteApiImpl(conf);

        const req = new AuthorizationIssueRequest();
        req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc';
        req.subjec = 'john';

        await api.authorizationIssue(req);
  tags: [ Authorization Endpoint ]
