post:
  summary: /api/service/create API
  description: |
    Create a new service.
  security:
    - ServiceOwnerCredentials: []
  requestBody:
    required: false
    content:
      application/json:
        schema:
          $ref: ../model/service.yaml
        example:
          serviceName: My service
          issuer: https://my-service.example.com
          clientIdAliasEnabled: true
          supportedGrantTypes:
            - AUTHORIZATION_CODE
            - REFRESH_TOKEN
          supportedResponseTypes:
            - CODE
          authorizationEndpoint: https://my-service.example.com/authz
          pkceRequired: true
          tokenEndpoint: https://my-service.example.com/token
          supportedTokenAuthMethods:
            - CLIENT_SECRET_BASIC
          revocationEndpoint: https://my-service.example.com/revocation
          supportedRevocationAuthMethods:
            - CLIENT_SECRET_BASIC
          introspectionEndpoint: https://my-service.example.com/introspection
          supportedIntrospectionAuthMethods:
            - CLIENT_SECRET_BASIC
          accessTokenType: Bearer
          accessTokenDuration: 3600
          refreshTokenDuration: 3600
          supportedScopes:
            - name: timeline.read
              defaultEntry: false
              description: A permission to read your timeline.
            - name: history.read
              defaultEntry: false
              description: A permission to read your history.
          attributes:
            - key: attribute1-key
              value: attribute1-value
            - key: attribute2-key
              value: attribute2-value
      application/x-www-form-urlencoded:
        schema:
          $ref: ../model/service.yaml
  responses:
    '200':
      $ref: ../model/response/service_create_response.yaml
    '400':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/result.yaml
          example:
            resultCode: A001201
            resultMessage: '[A001201] /service/create, TLS must be used.'
    '401':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/result.yaml
          example:
            resultCode: A001202
            resultMessage: '[A001202] /service/create, Authorization header is missing.'
    '403':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/result.yaml
          example:
            resultCode: A001215
            resultMessage: '[A001215] /service/create, The service owner (API Key = 9503564192) is locked.'
    '500':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/result.yaml
          example:
            resultCode: A001101
            resultMessage: '[A001101] /service/create, Authlete Server error.'
  operationId: 'service_create_api'
  x-code-samples:
    - lang: shell
      label: curl
      source: |
        curl -v -X POST https://api.authlete.com/api/service/create \
        -H 'Content-Type:application/json' \
        -u '9503564192:cxRpzPEkvqYbDu14gpCVKi_p6kMQvcW-lBMi7IfWLK4' \
        -d '{ "serviceName": "My Service", ... }'

    - lang: java
      label: java
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        Service service = new Service();
        service.setServiceName("My Service");
        ...

        api.createService(service);

    - lang: cs
      label: C#
      source: |
        IAuthleteConfiguration conf = ...;
        IAuthleteApi api = new AuthleteApi(conf);

        Service service = new Service();
        service.ServiceName = "My Service";
        ...

        await api.CreateService(service);

    - lang: php
      label: PHP
      source: |
        $conf = ...;
        $api = new AuthleteApiImpl($conf);

        $service = new Service();
        $service.setServiceName("My Service");
        ...

        $api.createService($service);

    - lang: ruby
      source: |
        conf = ...
        api = Authlete::Api.new(conf)

        service = Authlete::Model::Service.new
        service.service_name = 'My Service'
        ...

        api.service_create(service)

    - lang: python
      source: |
        conf = ...
        api = AuthleteApiImpl(conf)

        service = Service()
        service.serviceName = 'My Service'
        ...

        api.createService(service)

    - lang: go
      source: |
        conf := ...
        api := api.New(&conf)

        service := dto.Service{}
        service.ServiceName = "My Service"
        ...

        api.CreateService(&service)

    - lang: ts
      label: deno
      source: |
        const conf: AuthleteConfiguration = ...;
        const api: AuthleteApi = new AuthleteApiImpl(conf);

        const service = new Service();
        service.serviceName = 'My Service';
        ...

        await api.createService(service);
  tags:
    - Service Management
