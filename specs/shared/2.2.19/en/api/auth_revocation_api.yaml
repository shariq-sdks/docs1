post:
  summary: /auth/revocation API
  description: |
    This API revokes access tokens and refresh tokens.

    <br>
    <details>
    <summary>Description</summary>

    This API is supposed to be called from within the implementation of the revocation endpoint ([RFC
    7009](tools.ietf.org/html/rfc7009)) of the authorization server implementation in order to revoke
    access tokens and refresh tokens.

    The response from `/auth/revocation` API has some parameters. Among them, it is `action` parameter
    that the authorization server implementation should check first because it denotes the next action
    that the authorization server implementation should take. According to the value of `action`, the
    authorization server implementation must take the steps described below.

    **INTERNAL_SERVER_ERROR**

    When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
    server implementation was wrong or that an error occurred in Authlete.
    In either case, from the viewpoint of the client application, it is an error on the server side.
    Therefore, the service implementation should generate a response to the client application with
    HTTP status of "500 Internal Server Error".

    The value of `responseContent` is a JSON string which describes the error, so it can be
    used as the entity body of the response.

    The following illustrates the response which the service implementation should generate and return
    to the client application.

    ```
    HTTP/1.1 500 Internal Server Error
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    **INVALID_CLIENT**

    When the value of `action` is `INVALID_CLIENT`, it means that authentication of the client failed.
    In this case, the HTTP status of the response to the client application is either "400 Bad Request"
    or "401 Unauthorized". The description about `invalid_client` shown below is an excerpt from [RFC
    6749](https://datatracker.ietf.org/doc/html/rfc6749).

    `invalid_client`

    > Client authentication failed (e.g., unknown client, no client authentication included, or unsupported
    authentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code
    to indicate which HTTP authentication schemes are supported. If the client attempted to authenticate
    via the `Authorization` request header field, the authorization server MUST respond with an HTTP
    401 (Unauthorized) status code and include the `WWW-Authenticate` response header field matching
    the authentication scheme used by the client.

    In either case, the value of `responseContent` is a JSON string which can be used as the entity
    body of the response to the client application.

    The following illustrates the response which the service implementation should generate and return
    to the client application.

    ```
    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    <br>

    ```
    HTTP/1.1 401 Unauthorized
    WWW-Authenticate: {challenge}
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    **BAD_REQUEST**

    When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
    is invalid.

    The HTTP status of the response returned to the client application must be "400 Bad Request" and
    the content type must be `application/json`. [RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009),
    [2.2.1. Error Respons](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2.1) states "The
    error presentation conforms to the definition in [Section 5.2](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2)
    of [[RFC 6749](https://datatracker.ietf.org/doc/html/rfc6749)]."

    The value of `responseContent` is a JSON string which describes the error, so it can be used
    as the entity body of the response.

    The following illustrates the response which the authorization server implementation should generate
    and return to the client application.

    ```
    HTTP/1.1 400 Bad Request
    Content-Type: application/json
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```

    **OK**

    When the value of `action` is `OK`, it means that the request from the client application is valid
    and the presented token has been revoked successfully or if the client submitted an invalid token.
    Note that invalid tokens do not cause an error. See [2.2. Revocation Response](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2) for details.

    The HTTP status of the response returned to the client application must be 200 OK.

    If the original request from the client application contains callback request parameter and its
    value is not empty, the content type should be `application/javascript` and the content should be
    a JavaScript snippet for JSONP.

    The value of `responseContent` is JavaScript snippet if the original request from the client application
    contains callback request parameter and its value is not empty. Otherwise, the value of `responseContent`
    is `null`.

    ```
    HTTP/1.1 200 OK
    Content-Type: application/javascript
    Cache-Control: no-store
    Pragma: no-cache

    {responseContent}
    ```
    </details>

  security:
    - ServiceCredentials: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../model/request/revocation_request.yaml
        example:
          token: VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token
          clientId: 26478243745571
          clientSecret: gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ
      application/x-www-form-urlencoded:
        schema:
          $ref: ../model/request/revocation_request.yaml
  responses:
    '200':
      $ref: ../model/response/revocation_response.yaml
    '400':
      $ref: ../model/response/400.yaml
    '401':
      $ref: ../model/response/401.yaml
    '403':
      $ref: ../model/response/403.yaml
    '500':
      $ref: ../model/response/500.yaml
  operationId: ''
  x-code-samples:
    - lang: shell
      label: curl
      source: |
        curl -v -X POST https://api.authlete.com/api/auth/revocation \
        -H 'Content-Type:application/json' \
        -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
        -d '{ "parameters": "token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token", "clientId": "26478243745571", "clientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ" }'

    - lang: java
      label: java
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        RevocationRequest req = new RevocationRequest();
        request.setParameters(...);

        api.revocation(req);

    - lang: cs
      label: C#
      source: |
        IAuthleteConfiguration conf = ...;
        IAuthleteApi api = new AuthleteApi(conf);

        RevocationRequest req = new RevocationRequest();
        req.Parameters = ...;

        await api.Revocation(req);

    - lang: php
      label: PHP
      source: |
        $conf = ...;
        $api = new AuthleteApiImpl($conf);

        $req = new RevocationRequest();
        $req.setParameters(...);

        $api.revocation($req);

    - lang: ruby
      source: |
        conf = ...
        api = Authlete::Api.new(conf)

        req = Authlete::Model::Request::RevocationRequest.new
        req.parameters = '...'

        api.revocation(req)

    - lang: python
      source: |
        conf = ...
        api = AuthleteApiImpl(conf)

        req = RevocationRequest()
        req.parameters = ...

        api.revocation(req)

    - lang: go
      source: |
        conf := ...
        api := api.New(&conf)

        req := dto.RevocationRequest{}
        req.Parameters = ...

        api.Revocation(&req)

    - lang: ts
      label: deno
      source: |
        const conf: AuthleteConfiguration = ...;
        const api: AuthleteApi = new AuthleteApiImpl(conf);

        const req = new RevocationRequest();
        req.parameters = ...;

        await api.revocation(req);
  tags:
    - Revocation Endpoint