post:
  summary: /backchannel/authentication/complete API
  description: |
    This API returns information about what action the authorization server should take after it receives
    the result of end-user's decision about whether the end-user has approved or rejected a client application's
    request on the authentication device.

    <br>
    <details>
    <summary>Description</summary>

    After the implementation of the backchannel authentication endpoint returns JSON containing an
    `auth_req_id` to the client, the authorization server starts a background process that communicates
    with the authentication device of the end-user. On the authentication device, end-user authentication
    is performed and the end-user is asked whether they give authorization to the client or not. The
    authorization server will receive the result of end-user authentication and authorization from
    the authentication device.

    After the authorization server receives the result from the authentication device, or even in the
    case where the server gave up receiving a response from the authentication device for some reasons,
    the server should call the `/backchannel/authentication/complete` API to tell Authlete the result.

    When the end-user was authenticated and authorization was granted to the client by the end-user,
    the authorization server should call the API with `result=AUTHORIZED`. In this successful case,
    the `subject` request parameter is mandatory. If the token delivery mode is `push`, the API will generate
    an access token, an ID token and optionally a refresh token. On the other hand, if the token delivery
    mode is `poll` or `ping`, the API will just update the database record so that `/auth/token` API
    can generate tokens later.

    When the authorization server received the decision of the end-user from the authentication device
    and it indicates that the end-user has rejected to give authorization to the client, the authorization
    server should call the API with `result=ACCESS_DENIED`. In this case, if the token delivery mode
    is `push`, the API will generate an error response that contains the error response parameter and
    optionally the `error_description` and error_uri response parameters (if the `errorDescription`
    and `errorUri` request parameters have been given). On the other hand, if the token delivery mode
    is `poll` or `ping`, the API will just update the database record so that `/auth/token` API can
    generate an error response later. In any token delivery mode, the value of the error parameter will
    become `access_denied`.

    When the authorization server could not get the result of end-user authentication and authorization
    from the authentication device for some reasons, the authorization server should call the API with
    `result=TRANSACTION_FAILED`. In this error case, the API will behave in the same way as in the case
    of `ACCESS_DENIED`. The only difference is that `expired_token` is used as the value of the `error`
    parameter.

    The response from `/backchannel/authentication/complete` API has various parameters. Among them,
    it is `action` parameter that the authorization server implementation should check first because
    it denotes the next action that the authorization server implementation should take. According to
    the value of `action`, the service implementation must take the steps described below.

    **SERVER_ERROR**

    When the value of `action` is `SERVER_ERROR`, it means either (1) that the request from the authorization
    server to Authlete was wrong, or (2) that an error occurred on Authlete side.

    When the backchannel token delivery mode is `ping` or `push`, `SERVER_ERROR` is used only when
    an error is detected before the record of the ticket (which is included in the API call to `/backchannel/authentication/complete`)
    is retrieved from the database successfully. If an error is detected after the record of the ticket
    is retrieved from the database, `NOTIFICATION` is used instead of `SERVER_ERROR`.

    When the backchannel token delivery mode is `poll`, `SERVER_ERROR` is used regardless of whether
    it is before or after the record of the ticket is retrieved from the database.

    **NO_ACTION**

    When the value of `action` is `NO_ACTION`, it means that the authorization server does not have
    to take any immediate action.

    `NO_ACTION` is returned when the backchannel token delivery mode is `poll`. In this case, the client
    will receive the final result at the token endpoint.

    **NOTIFICATION**

    When the value of `action` is `NOTIFICATION`, it means that the authorization server must send a
    notification to the client notification endpoint.

    According to the CIBA Core specification, the notification is an HTTP POST request whose request
    body is JSON and whose `Authorization` header contains the client notification token, which was
    included in the backchannel authentication request as the value of the `client_notification_token`
    request parameter, as a bearer token.

    When the backchannel token delivery mode is `ping`, the request body of the notification is JSON
    which contains the `auth_req_id` property only. When the backchannel token delivery mode is `push`,
    the request body will additionally contain an access token, an ID token and other properties. Note
    that when the backchannel token delivery mode is `poll`, a notification does not have to be sent
    to the client notification endpoint.

    In error cases, in the ping mode, however, the content of a notification is not different from the
    content in successful cases. That is, the notification contains the `auth_req_id` property only.
    The client will know the error when it accesses the token endpoint. On the other hand, in the
    `push` mode, in error cases, the content of a notification will include the `error` property instead
    of an access token and an ID token. The client will know the error by detecting that error is included
    in the notification.

    In any case, the value of `responseContent` is JSON which can be used as the request body of the
    notification.

    The client notification endpoint that the notification should be sent to the value of the `clientNotificationEndpoint`
    parameter. Likewise, the client notification token that the notification should include as a bearer
    token is the `clientNotificationToken` parameter. With these methods, the notification can be built
    like the following.

    ```
    POST {clientNotificationEndpoint} HTTP/1.1
    HOST: {The host of clientNotificationEndpoint}
    Authorization: Bearer {notificationToken}
    Content-Type: application/json

    {responseContent}
    ```
    </details>

  security:
    - ServiceCredentials: []
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../model/request/backchannel_authentication_complete_request.yaml
        example:
          ticket: NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q
          result: AUTHORIZED
          subject: john
      application/x-www-form-urlencoded:
        schema:
          $ref: ../model/request/backchannel_authentication_complete_request.yaml
  responses:
    '200':
      $ref: ../model/response/backchannel_authentication_complete_response.yaml
    '400':
      $ref: ../model/response/400.yaml
    '401':
      $ref: ../model/response/401.yaml
    '403':
      $ref: ../model/response/403.yaml
    '500':
      $ref: ../model/response/500.yaml
  operationId: 'backchannel_authentication_complete_api'
  x-code-samples:
    - lang: shell
      label: curl
      source: |
        curl -v -X POST https://api.authlete.com/api/backchannel/authentication/complete \
        -H 'Content-Type: application/json' \
        -u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls' \
        -d '{ "ticket": "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q", "result": "AUTHORIZED", "subject": "john" }'

    - lang: java
      label: java
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        BackchannelAuthenticationCompleteRequest req = new BackchannelAuthenticationCompleteRequest();
        req.setTicket("NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q");
        req.setResult(BackchannelAuthenticationCompleteRequest.Result.AUTHORIZED);
        req.setSubject("john");

        api.backchannelAuthenticationComplete(req);

    - lang: cs
      label: C#
      source: |
        IAuthleteConfiguration conf = ...;
        IAuthleteApi api = new AuthleteApi(conf);

        BackchannelAuthenticationCompleteRequest req = new BackchannelAuthenticationCompleteRequest();
        req.Ticket = "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q";
        req.Result = BackchannelAuthenticationCompleteResult.AUTHORIZED;
        req.Subject = "john";

        await api.BackchannelAuthenticationComplete(req);

    - lang: php
      label: PHP
      source: |
        $conf = ...;
        $api = new AuthleteApiImpl($conf);

        $req = new BackchannelAuthenticationCompleteRequest();
        $req.setTicket("NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q");
        $req.setResult(BackchannelAuthenticationCompleteResult.AUTHORIZED);
        $req.setSubject("john");

        $api.backchannelAuthenticationComplete($req);

    - lang: ruby
      source: |
        conf = ...
        api = Authlete::Api.new(conf)

        req = Authlete::Model::Request::BackchannelAuthenticationCompleteRequest.new
        req.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'
        req.result = 'AUTHORIZED'
        req.subject = 'john'

        api.backchannel_authentication_complete(req)

    - lang: python
      source: |
        conf = ...
        api = AuthleteApiImpl(conf)

        req = BackchannelAuthenticationCompleteRequest()
        req.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'
        req.result = BackchannelAuthenticationCompleteResult.AUTHORIZED
        req.subject = 'john'

        api.backchannelAuthenticationComplete(req)

    - lang: go
      source: |
        conf := ...
        api := api.New(&conf)

        req := dto.BackchannelAuthenticationCompleteRequest{}
        req.Ticket = "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q"
        req.Result = BackchannelAuthenticationCompleteResult.AUTHORIZED
        req.Subject = "john"

        api.BackchannelAuthenticationComplete(&req)

    - lang: ts
      label: deno
      source: |
        // This API is not supported yet.
  tags:
    - CIBA