post:
  summary: Issue UserInfo Response
  description: |
    This API generates an ID token.

    <br>
    <details>
    <summary>Description</summary>

    This API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
    of the authorization server in order to generate an ID token. Before calling this API, a valid
    response from `/auth/userinfo` API must be obtained. Then, call this API with the access token
    contained in the response and the claims values of the user (subject) associated with the access
    token. See **OK** written in the description of `/auth/userinfo` API for details.

    The response from `/auth/userinfo/issue` API has various parameters. Among them, it is `action`
    parameter that the authorization server implementation should check first because it denotes the
    next action that the authorization server implementation should take. According to the value of
    `action`, the service implementation must take the steps described below.

    **INTERNAL_SERVER_ERROR**

    When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
    server implementation was wrong or that an error occurred in Authlete. In either case, from the
    viewpoint of the client application, it is an error on the server side. Therefore, the service
    implementation should generate a response to the client application with HTTP status of "500 Internal
    Server Error".

    The parameter `responseContent` returns a string which describes the error in the format of [RFC
    6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
    endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
    header.

    The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
    1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
    Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

    ```
    HTTP/1.1 500 Internal Server Error
    WWW-Authenticate: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **BAD_REQUEST**

    When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
    does not contain an access token (= the request from the authorization server implementation to
    Authlete does not contain `token` parameter).

    The parameter `responseContent` returns a string which describes the error in the format of [RFC
    6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
    endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
    header.

    The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
    1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
    Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

    ```
    HTTP/1.1 400 Bad Request
    WWW-Authenticate: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **UNAUTHORIZED**

    When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has
    expired, or is not associated with any subject (= any user account).

    The parameter `responseContent` returns a string which describes the error in the format of [RFC
    6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
    endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
    header.

    The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
    1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
    Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

    ```
    HTTP/1.1 401 Unauthorized
    WWW-Authenticate: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **FORBIDDEN**

    When the value of `action` is `FORBIDDEN`, it means that the access token does not include the
    `openid` scope.

    The parameter `responseContent` returns a string which describes the error in the format of [RFC
    6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo
    endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`
    header.

    The following is an example response which complies with RFC 6750. Note that OpenID Connect Core
    1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo
    Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

    ```
    HTTP/1.1 403 Forbidden
    WWW-Authenticate: {responseContent}
    Cache-Control: no-store
    Pragma: no-cache
    ```

    **JSON**

    When the value of `action` is `JSON`, it means that the access token which the client application
    presented is valid and an ID token was successfully generated in the format of JSON.

    The userinfo endpoint implementation is expected to generate a response to the client application.
    The content type of the response must be `application/json` and the response body must be an ID
    token in JSON format.

    The value of `responseContent` is the ID token in JSON format when `action` is `JSON`, so
    a response to the client can be built like below.

    ```
    HTTP/1.1 200 OK
    Cache-Control: no-store
    Pragma: no-cache
    Content-Type: application/json;charset=UTF-8

    {responseContent}
    ```

    **JWT**

    When the value of `action` is `JWT`, it means that the access token which the client application
    presented is valid and an ID token was successfully generated in the format of JWT (JSON Web Token)
    ([RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519)).

    The userinfo endpoint implementation is expected to generate a response to the client application.
    The content type of the response must be `application/jwt` and the response body must be an ID
    token in JWT format.

    The value of `responseContent` is the ID token in JSON format when `action` is `JWT`, so a response
    to the client can be built like below.

    ```
    HTTP/1.1 200 OK
    Cache-Control: no-store
    Pragma: no-cache
    Content-Type: application/jwt

    {responseContent}
    ```

    </details>
  parameters:
    - in: path
      name: serviceId
      description: A service ID.
      required: true
      schema:
        type: string
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../model/request/userinfo_issue_request.yaml
        example:
          token: Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI
      application/x-www-form-urlencoded:
        schema:
          $ref: ../model/request/userinfo_issue_request.yaml
  responses:
    '200':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/userinfo_issue_response.yaml
          example:
            {
              "resultCode": "A096001",
              "resultMessage": "[A096001] An ID token was generated successfully.",
              "action": "JSON",
              "responseContent": "{\\\"exp\\\":1511600971,\\\"sub\\\":\\\"john\\\",\\\"aud\\\":[\\\"26478243745571\\\"],\\\"iss\\\":\\\"https://authlete.com\\\",\\\"iat\\\":1511514571}"
            }
    '400':
      $ref: ../model/response/400.yaml
    '401':
      $ref: ../model/response/401.yaml
    '403':
      $ref: ../model/response/403.yaml
    '500':
      $ref: ../model/response/500.yaml
  operationId: 'auth_userinfo_issue_api'
  x-code-samples:
    - lang: shell
      label: curl
      source: |
        curl -v -X POST https://us.authlete.com/api/21653835348762/auth/userinfo/issue \
        -H 'Content-Type:application/json' \
        -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
        -d '{ "token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI" }'

    - lang: java
      label: java
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        UserInfoIssueRequest req = new UserInfoIssueRequest();
        req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

        api.userinfoIssue(req);

    # - lang: cs
    #   label: C#
    #   source: |
    #     IAuthleteConfiguration conf = ...;
    #     IAuthleteApi api = new AuthleteApi(conf);

    #     UserInfoIssueRequest req = new UserInfoIssueRequest();
    #     req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI";

    #     await api.UserinfoIssue(req);

    # - lang: php
    #   label: PHP
    #   source: |
    #     $conf = ...;
    #     $api = new AuthleteApiImpl($conf);

    #     $req = new UserInfoIssueRequest();
    #     $req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

    #     $api.userinfoIssue($req);

    # - lang: ruby
    #   source: |
    #     conf = ...
    #     api = Authlete::Api.new(conf)

    #     req = Authlete::Model::Request::UserInfoIssueRequest.new
    #     req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

    #     api.user_info_issue(req)

    - lang: python
      source: |
        conf = ...
        api = AuthleteApiImpl(conf)

        req = UserInfoIssueRequest()
        req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

        api.userinfoIssue(req)

    # - lang: go
    #   source: |
    #     conf := ...
    #     api := api.New(&conf)

    #     req := dto.UserInfoIssueRequest{}
    #     req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI"

    #     api.UserinfoIssue(&req)

    # - lang: ts
    #   label: deno
    #   source: |
    #     const conf: AuthleteConfiguration = ...;
    #     const api: AuthleteApi = new AuthleteApiImpl(conf);

    #     const req = new UserInfoIssueRequest();
    #     req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI';

    #     await api.userInfoIssue(req);
  tags:
    - UserInfo Endpoint
