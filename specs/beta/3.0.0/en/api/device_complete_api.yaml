post:
  summary: /api/{serviceId}/device/complete API
  description: |
    This API returns information about what action the authorization server should take after it receives
    the result of end-user's decision about whether the end-user has approved or rejected a client
    application's request.

    <br>
    <details>
    <summary>Description</summary>

    In the device flow, an end-user accesses the verification endpoint of the authorization server where
    she interacts with the verification endpoint and inputs a user code. The verification endpoint checks
    if the user code is valid and then asks the end-user whether she approves or rejects the authorization
    request which the user code represents.

    After the authorization server receives the decision of the end-user, it should call Authlete's
    `/device/complete` API to tell Authlete the decision.

    When the end-user was authenticated and authorization was granted to the client by the end-user,
    the authorization server should call the API with `result=AUTHORIZED`. In this successful case,
    the subject request parameter is mandatory. The API will update the database record so that `/auth/token`
    API can generate an access token later.

    If the `scope` parameter of the device authorization request included the openid scope, an ID token
    is generated. In this case, `sub`, `authTime`, `acr` and `claims` request parameters in the API
    call to `/device/complete` affect the ID token.

    When the authorization server receives the decision of the end-user and it indicates that she has
    rejected to give authorization to the client, the authorization server should call the API with
    `result=ACCESS_DENIED`. In this case, the API will update the database record so that the `/auth/token`
    API can generate an error response later. If `errorDescription` and `errorUri` request parameters
    are given to the `/device/complete` API, they will be used as the values of `error_description`
    and `error_uri` response parameters in the error response from the token endpoint.

    When the authorization server could not get decision from the end-user for some reasons, the authorization
    server should call the API with `result=TRANSACTION_FAILED`. In this error case, the API will behave
    in the same way as in the case of `ACCESS_DENIED`. The only difference is that `expired_token` is
    used as the value of the `error` response parameter instead of `access_denied`.

    After receiving a response from the `/device/complete` API, the implementation of the authorization
    server should retrieve the value of `action` from the response and take the following steps according
    to the value.

    **SERVER_ERROR**

    When the value of `action` is `SERVER_ERROR`, it means that an error occurred on Authlete side. The
    authorization server implementation should tell the end-user that something wrong happened and
    urge her to re-initiate a device flow.

    **USER_CODE_NOT_EXIST**

    When the value of `action` is `USER_CODE_NOT_EXIST`, it means that the user code included in the API
    call does not exist. The authorization server implementation should tell the end-user that the user
    code has been invalidated and urge her to re-initiate a device flow.

    **USER_CODE_EXPIRED**

    When the value of `action` is `USER_CODE_EXPIRED`,  it means that the user code included in the API
    call has expired. The authorization server implementation should tell the end-user that the user
    code has expired and urge her to re-initiate a device flow.

    **INVALID_REQUEST**

    When the value of `action` is `INVALID_REQUEST`, it means that the API call is invalid. Probably,
    the authorization server implementation has some bugs.

    **SUCCESS**

    When the value of `action` is `SUCCESS`, it means that the API call has been processed successfully.
    The authorization server should return a successful response to the web browser the end-user is
    using.
    </details>

  security:
    - UseService: []
  parameters:
    - in: path
      name: serviceId
      description: A service ID.
      required: true
      schema:
        type: string
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: ../model/request/device_complete_request.yaml
        example:
          userCode: XWWKPBWVXQ
          result: AUTHORIZED
          subject: john
      application/x-www-form-urlencoded:
        schema:
          $ref: ../model/request/device_complete_request.yaml
  responses:
    '200':
      description: ""
      content:
        application/json:
          schema:
            $ref: ../model/response/device_complete_response.yaml
          example:
            {
              "resultCode": "A241001",
              "resultMessage": "[A241001] The API call was processed successfully.",
              "action": "SUCCESS"
            }
    '400':
      $ref: ../model/response/400.yaml
    '401':
      $ref: ../model/response/401.yaml
    '403':
      $ref: ../model/response/403.yaml
    '500':
      $ref: ../model/response/500.yaml
  operationId: 'device_complete_api'
  x-code-samples:
    - lang: shell
      label: curl
      source: |
        curl -v -X POST https://beta.authlete.com/api/21653835348762/device/complete \
        -H 'Content-Type: application/json' \
        -u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \
        -d '{ "userCode": "XWWKPBWVXQ", "result": "AUTHORIZED", "subject": "john" }'

    - lang: java
      label: java
      source: |
        AuthleteConfiguration conf = ...;
        AuthleteApi api = AuthleteApiFactory.create(conf);

        DeviceCompleteRequest req = new DeviceCompleteRequest();
        req.setUserCode("XWWKPBWVXQ");
        req.setResult(DeviceCompleteRequest.Result.AUTHORIZED);
        req.setSubject("john");

        api.deviceComplete(req);

    # - lang: cs
    #   label: C#
    #   source: |
    #     IAuthleteConfiguration conf = ...;
    #     IAuthleteApi api = new AuthleteApi(conf);

    #     DeviceCompleteRequest req = new DeviceCompleteRequest();
    #     req.SetUserCode("XWWKPBWVXQ");
    #     req.SetResult(DeviceCompleteResult.AUTHORIZED);
    #     req.SetSubject("john");

    #     await api.DeviceComplete(req);

    # - lang: php
    #   label: PHP
    #   source: |
    #     $conf = ...;
    #     $api = new AuthleteApiImpl($conf);

    #     $req = new DeviceCompleteRequest();
    #     $req.setUserCode("XWWKPBWVXQ");
    #     $req.setResult(DeviceCompleteResult.$AUTHORIZED);
    #     $req.setSubject("john");

    #     $api.deviceComplete($req);

    # - lang: ruby
    #   source: |
    #     conf = ...
    #     api = Authlete::Api.new(conf)

    #     req = Authlete::Model::Request::DeviceCompleteRequest.new
    #     req.use_code = 'XWWKPBWVXQ'
    #     req.result = 'AUTHORIZED'
    #     req.subject = 'john'

    #     api.deviceComplete(req)

    - lang: python
      source: |
        conf = ...
        api = AuthleteApiImpl(conf)

        req = DeviceCompleteRequest()
        req.setUserCode('XWWKPBWVXQ')
        req.setResult(DeviceCompleteResult.AUTHORIZED)
        req.setSubject('john')

        api.deviceComplete(req)

    # - lang: go
    #   source: |
    #     conf := ...
    #     api := api.New(&conf)

    #     req := dto.DeviceCompleteRequest{}
    #     req.UserCode = "XWWKPBWVXQ"
    #     req.Result = DeviceCompleteResult.AUTHORIZED
    #     req.Subject = "john"

    #     api.DeviceComplete(&req)

    # - lang: ts
    #   label: deno
    #   source: |
    #     // This API is not supported yet.
  tags:
    - Device Flow
