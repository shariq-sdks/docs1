type: object
properties:
  resultCode:
    type: string
    description: The code which represents the result of the API call.
  resultMessage:
    type: string
    description: A short message which explains the result of the API call.
  action:
    type: string
    enum:
      - INTERNAL_SERVER_ERROR
      - INVALID_CLIENT
      - BAD_REQUEST
      - PASSWORD
      - OK
      - TOKEN_EXCHANGE
      - JWT_BEARER
    description: The next action that the authorization server implementation should take.
  responseContent:
    type: string
    description: |
      The content that the authorization server implementation is to return to the client application.
      Its format varies depending on the value of `action` parameter.
  username:
    type: string
    description: |
       The value of `username` request parameter in the token request.
       The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
       In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.

       This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
  password:
    type: string
    description: |
       The value of `password` request parameter in the token request.
       The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
       In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.

       This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
  ticket:
    type: string
    description: |
      The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.

      This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
  accessToken:
    type: string
    description: The newly issued access token.
  accessTokenExpiresAt:
    type: integer
    format: int64
    description: |
      The datetime at which the newly issued access token will expire.
      The value is represented in milliseconds since the Unix epoch (1970-01-01).
  accessTokenDuration:
    type: integer
    format: int64
    description: The duration of the newly issued access token in seconds.
  refreshToken:
    type: string
    description: The newly issued refresh token.
  refreshTokenExpiresAt:
    type: integer
    format: int64
    description: |
      The datetime at which the newly issued refresh token will expire.
      The value is represented in milliseconds since the Unix epoch (1970-01-01).
  refreshTokenDuration:
    type: integer
    format: int64
    description: The duration of the newly issued refresh token in seconds.
  idToken:
    type: string
    description: |
      The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
      of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
  grantType:
    type: string
    description: The grant type of the token request.
  clientId:
    type: integer
    format: int64
    description: The client ID.
  clientIdAlias:
    type: string
    description: |
      The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
      Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
  clientIdAliasUsed:
    type: boolean
    description: |
      The flag which indicates whether the client ID alias was used when the token request was made.
      `true` if the client ID alias was used when the token request was made.
  subject:
    type: string
    description: |
      The subject (= resource owner's ID) of the access token.
      Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
      [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
      is not associated with any specific end-user.
  scopes:
    type: array
    items:
      type: string
    description: The scopes covered by the access token.
  properties:
    type: array
    items:
      $ref: ../property.yaml
    description: |
      The extra properties associated with the access token.
      This parameter is `null` when no extra property is associated with the issued access token.
  jwtAccessToken:
    type: string
    description: |
      The newly issued access token in JWT format. If the authorization server is configured
      to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
      non-null value), a JWT-based access token is issued along with the original random-string
      one.
  resources:
    type: array
    items:
      type: string
    description: |
      The resources specified by the `resource` request parameters in the token request.
      See "Resource Indicators for OAuth 2.0" for details.
  accessTokenResources:
    type: array
    items:
      type: string
    description: |
      The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
  authorizationDetails:
    $ref: ../authorization_details.yaml
  serviceAttributes:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      The attributes of this service that the client application belongs to.
  clientAttributes:
    type: array
    items:
      $ref: ../pair.yaml
    description: |
      The attributes of the client.
  clientAuthMethod:
    type: string
    description: |
      The client authentication method that was performed at the token endpoint.
  grantId:
    type: string
    description: |
      the value of the `grant_id` request parameter of the device authorization request.

      The `grant_id` request parameter is defined in
      [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
      , which is supported by Authlete 2.3 and newer versions.
  audiences:
    type: array
    items:
      type: string
    description: |
      The audiences on the token exchange request
  requestedTokenType:
    $ref: ../token_type.yaml
  subjectToken:
    type: string
  subjectTokenType:
    $ref: ../token_type.yaml
  subjectTokenInfo:
    $ref: ../token_info.yaml
  actorToken:
    type: string
  actorTokenType:
    $ref: ../token_type.yaml
  actorTokenInfo:
    $ref: ../token_info.yaml
  assertion:
    type: string
    description: |
      For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
  previousRefreshTokenUsed:
    type: boolean
    description: |
      Indicate whether the previous refresh token that had been kept in the database for a short time was used
  clientEntityId:
    type: string
    description: |
      The entity ID of the client.
  clientEntityIdUsed:
    type: boolean
    description: |
      Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
  cnonceDuration:
    type: integer
    format: int64
    description: |
      Duration of the `c_nonce` in seconds.
  dpopNonce:
    type: string
    description: |
      Get the expected nonce value for DPoP proof JWT, which should be used
      as the value of the `DPoP-Nonce` HTTP header.
  cnonce:
    type: string
    description: |
      Get the `c_nonce`.
  cnonceExpiresAt:
    type: integer
    format: int64
    description: |
      Get the time at which the `c_nonce` expires in milliseconds since
      the Unix epoch (1970-01-01).
  requestedIdTokenClaims:
    type: array
    items:
      type: string
    description: |
      Get the names of the claims that the authorization request (which resulted
      in generation of the access token) requested to be embedded in ID tokens.
  refreshTokenScopes:
    type: array
    items:
      type: string
    description: |
      Scopes associated with the refresh token.