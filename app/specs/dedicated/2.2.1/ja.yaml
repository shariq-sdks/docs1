openapi: 3.0.0
info:
  title: Authlete API
  description: DEDICATED:JA:This document decribes Authlete API.
  version: '2.2.1'
  contact: {}
servers:
  - url: 'https://api.authlete.com/api'
    description: shared server
  - url: '{your-authlete-server}/api'
    variables:
      your-authlete-server:
        default: 'https://your-authlete-server'
    description: dedicated/on-premise server
paths:
  /auth/authorization:
    post:
      summary: /auth/authorization API
      description: |
        This API parses request parameters of an authorization request and returns necessary data for the authorization server
        implementation to process the authorization request further.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the authorization endpoint of the service.
        The endpoint implementation must extract the request parameters from the authorization request from the client application
        and pass them as the value of parameters request parameter for Authlete's `/auth/authorization` API.

        The value of `parameters` is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
        or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
        the client application is `POST`.

        The following code snippet is an example in JAX-RS showing how to extract request parameters from the authorization request.

        ```java
        @GET
        public Response get(@Context UriInfo uriInfo)
        {
            // The query parameters of the authorization request.
            String parameters = uriInfo.getRequestUri().getQuery();
            ......
        }

        @POST
        @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
        public Response post(String parameters)
        {
            // 'parameters' is the entity body of the authorization request.
            ......
        }
        ```

        The endpoint implementation does not have to parse the request parameters from the client application because Authlete's `/auth/authorization` API does it.

        The response from `/auth/authorization` API has various parameters. Among them, it is `action` parameter that the authorization server implementation should check
        first because it denotes the next action that the authorization server implementation should take. According to the value of `action`, the service implementation
        must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".
        Authlete recommends `application/json` as the content type although OAuth 2.0 specification does not mention the format of the error response
        when the redirect URI is not usable.

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application
        since "500 Internal Server Error" is not required by OAuth 2.0.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application is invalid.

        A response with HTTP status of "400 Bad Request" should be returned to the client application and Authlete recommends `application/json`
        as the content type although OAuth 2.0 specification does not mention the format of the error response when the redirect URI is not usable.

        `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since "400 Bad Request" is not required by OAuth 2.0.

        **LOCATION**

        When the value of `action` is `LOCATION`, it means that the request from the client application is invalid but the redirect URI
        to which the error should be reported has been determined.

        A response with HTTP status of "302 Found" must be returned to the client application with `Location` header
        which has a redirect URI with error parameter.

        `responseContent` contains a redirect URI with `error` parameter, so it can be used as the value of `Location` header.

        The following illustrates the response which the service implementation must generate and return to the client application.

        ```http
        HTTP/1.1 302 Found
        Location: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORM**

        When the value of `action` is `FORM`, it means that the request from the client application is invalid but the redirect URI to
        which the error should be reported has been determined, and that the authorization request contains `response_mode=form_post`
        as is defined in [OAuth 2.0 Form Post Response Mode](https://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html).

        The HTTP status of the response returned to the client application should be "200 OK" and the content type should be `text/html;charset=UTF-8`.

        `responseContent` contains an HTML which can be used as the entity body of the response.

        The following illustrates the response which the service implementation must generate and return to the client application.

        ```http
        HTTP/1.1 200 OK
        Content-Type: text/html;charset=UTF-8
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **NO_INTERACTION**

        When the value of action is `NO_INTERACTION`, it means that the request from the client application has no problem and requires
        the service to process the request without displaying any user interface pages for authentication or consent.
        This case happens when the authorization request contains `prompt=none`.

        The service must follow the steps described below.

        1. [END-USER AUTHENTICATION]<br>
          Check whether an end-user has already logged in. If an end-user has logged in, go to the next step ([MAX_AGE]).
          Otherwise, call Authlete's `/auth/authorization/fail` API with `reason=NOT_LOGGED_IN` and use the response from
          the API to generate a response to the client application.

        2. [MAX_AGE]<br>
          Get the value of `maxAge` parameter from the `/auth/authorization` API response.
          The value represents the maximum authentication age which has come from `max_age` request parameter
          or `defaultMaxAge` configuration parameter of the client application.<br>
          If the value is `0`, go to the next step ([SUBJECT]). Otherwise, follow the sub steps described below.<br><br>
          (i) Get the time at which the end-user was authenticated. that this value is not managed by Authlete, meaning that
          it is expected that the service implementation manages the value. If the service implementation does not manage
          authentication time of end-users, call Authlete's `/auth/authorization/fail` API with `reason=MAX_AGE_NOT_SUPPORTED`
          and use the API response to generate a response to the client application.<br><br>
          (ii) Add the value of the maximum authentication age (which is represented in seconds) to the authentication time.
          The calculated value is the expiration time.<br><br>
          (iii) Check whether the calculated value is equal to or greater than the current time.
          If this condition is satisfied, go to the next step ([SUBJECT]). Otherwise, call Authlete's `/auth/authorization/fail` API
          with `reason=EXCEEDS_MAX_AGE` and use the API response to generate a response to the client application.

        3. [SUBJECT]<br>
          Get the value of `subject` from the `/auth/authorization` API response.
          The value represents an end-user who the client application expects to grant authorization.<br>
          If the value is `null`, go to the next step ([ACRs]). Otherwise, follow the sub steps described below.<br><br>
          (i) Compare the value of the requested subject to the current end-user.<br><br>
          (ii) If they are equal, go to the next step ([ACRs]). If they are not equal, call Authlete's `/auth/authorization/fail` API
          with `reason=DIFFERENT_SUBJECT` and use the response from the API to generate a response to the client application.

        4. [ACRs]<br>
          Get the value of `acrs` from the `/auth/authorization` API response.
          The value represents a list of ACRs (Authentication Context Class References) and comes from
          (1) acr claim in `claims` request parameter, (2) `acr_values` request parameter, or (3) `default_acr_values` configuration parameter of the client application.<br>
          It is ensured that all the ACRs in acrs are supported by the authorization server implementation.
          In other words, it is ensured that all the ACRs are listed in `acr_values_supported` configuration parameter of the authorization server.
          If the value of ACRs is `null`, go to the next step ([ISSUE]). Otherwise, follow the sub steps described below.<br><br>
          (i) Get the ACR performed for the authentication of the current end-user. Note that this value is managed not by Authlete but by the authorization server implementation.
          (If the authorization server implementation cannot handle ACRs, it should not have listed ACRs as "acr_values_supported".)<br><br>
          (ii) Compare the ACR value obtained in the above step to each element in the ACR array (`acrs`) in the listed order.<br><br>
          (iii) If the ACR value was found in the array, (= the ACR performed for the authentication of the current end-user did not match any one of the ACRs requested by the client application),
          check whether one of the requested ACRs must be satisfied or not using `acrEssential` parameter in the `/auth/authorization` API response.
          If the value of `acrEssential` parameter is `true`, call Authlete's `/auth/authorization/fail` API with `reason=ACR_NOT_SATISFIED`
          and use the response from the API to generate a response to the client application. Otherwise, go to the next step ([SCOPES]).

        5. [SCOPES]<br>
          Get the value of `scopes` from the `/auth/authorization` API response. If the array contains a scope which has not been granted to
          the client application by the end-user in the past, call Authlete's `/auth/authorization/fail` API with `reason=CONSENT_REQUIRED`
          and use the response from the API to generate a response to the client application. Otherwise, go to the next step ([RESOURCES]).
          Note that Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*` APIs), which is only available
          in a dedicated/onpremise Authlete server (contact sales@authlete.com for details).

        6. [RESOURCES]<br>
          Get the value of `resources` from the `/auth/authorization` API response.
          The array represents the values of the `resource` request parameters. If you want to reject the request, call Authlete's `/auth/authorization/fail` API with `reason=INVALID_TARGET`
          and use the response from the API to generate a response to the client application. Otherwise, go to the next step ([ISSUE]).
          See "Resource Indicators for OAuth 2.0" for details.
          Note that the specification is supported since Authlete 2.2. If the Authlete server you are using is older than 2.2, the value of `resources` parameter is always null.

        7. [ISSUE]<br>
          If all the above steps succeeded, the last step is to issue an authorization code, an ID token and/or an access token.
          (There is a special case, though. In the case of `response_type=none`, nothing is issued.) It can be performed by calling
          Authlete's `/auth/authorization/issue` API. The API requires the following parameters. Prepare these parameters and call
          `/auth/authorization/issue` API and use the response to generate a response to the client application.

            - <u>`ticket` (required)</u><br>
              This parameter represents a ticket which is exchanged with tokens at `/auth/authorization/issue`.
              Use the value of `ticket` contained in the `/auth/authorization` API response.

            - <u>`subject` (required)</u><br>
              This parameter represents the unique identifier of the current end-user. It is often called "user ID" and it may or may not be visible to the user.
              In any case, it is a number or a string assigned to an end-user by the authorization server implementation. Authlete does not care about the format
              of the value of subject, but it must consist of only ASCII letters and its length must not exceed 100.<br>
              When the value of `subject` parameter in the /auth/authorization API response is not `null`, it is necessarily identical to the value of `subject`
              parameter in the `/auth/authorization/issue` API request.

              The value of this parameter will be embedded in an ID token as the value of `sub` claim. When the value of `subject_type` configuration parameter
              of the client application is `PAIRWISE`, the value of sub claim is different from the value specified by this parameter,
              See [8. Subject Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes)  of OpenID Connect Core 1.0 for details
              about subject types.

              You can use the `sub` request parameter to adjust the value of the `sub` claim in an ID token. See the description of the `sub` request parameter for details.

            - <u>`authTime` (optional)</u><br>
              This parameter represents the time when the end-user authentication occurred. Its value is the number of seconds from `1970-01-01`. The value of this parameter
              will be embedded in an ID token as the value of `auth_time` claim.

            - <u>`acr` (optional)</u><br>
              This parameter represents the ACR (Authentication Context Class Reference) which the authentication of the end-user satisfies. When `acrs` in the `/auth/authorization` API response
               is a non-empty array and the value of `acrEssential` is `true`, the value of this parameter must be one of the array elements. Otherwise, even `null` is allowed.
               The value of this parameter will be embedded in an ID token as the value of `acr` claim.

            - <u>`claims` (optional)</u><br>
              This parameter represents claims of the end-user. "Claims" here are pieces of information about the end-user such as `"name"`, `"email"` and `"birthdate"`.
              The authorization server implementation is required to gather claims of the end-user, format the claim values into JSON and set the JSON string as the
              value of this parameter.

              The claims which the authorization server implementation is required to gather are listed in `claims` parameter in the `/auth/authorization` API response.

              For example, if claims parameter lists `"name"`, `"email"` and `"birthdate"`, the value of this parameter should look like the following.

              ```json
              {
                "name": "John Smith",
                "email": "john@example.com",
                "birthdate": "1974-05-06"
              }
              ```

              `claimsLocales` parameter in the `/auth/authorization` API response lists the end-user's preferred languages and scripts, ordered by preference.
              When `claimsLocales` parameter is a non-empty array, its elements should be taken into account when the authorization server implementation gathers claim values.
              Especially, note the excerpt below from [5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts) of OpenID Connect Core 1.0.

              > When the OP determines, either through the `claims_locales` parameter, or by other means, that the End-User and Client are requesting Claims in only one set of
              languages and scripts, it is RECOMMENDED that OPs return Claims without language tags when they employ this language and script.
              It is also RECOMMENDED that Clients be written in a manner that they can handle and utilize Claims using language tags.

              If `claims` parameter in the `/auth/authorization` API response is `null` or an empty array, the value of this parameter should be `null`.

              See [5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) of OpenID Connect core 1.0 for claim names and their value formats.
              Note (1) that the authorization server implementation support its special claims ([5.1.2. Additional Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims))
              and (2) that claim names may be followed by a language tag ([5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)).
              Read the specification of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) for details.

              The claim values in this parameter will be embedded in an ID token.

              Since Authlete 2.25, `idTokenClaims` parameter is available in the `/auth/authorization` API response. The parameter has the value of the `"id_token"` property in the `claims` request parameter
              or in the `"claims"` property in a request object. The value of this parameter should be considered when you prepare claim values.

            - <u>`properties` (optional)</u><br>
              Extra properties to associate with an access token and/or an authorization code that may be issued by this request.
              Note that `properties` parameter is accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded` for details.

            - <u>`scopes` (optional)</u><br>
              Scopes to associate with an access token and/or an authorization code. If this parameter is `null`, the scopes specified in the original authorization request from
              the client application are used. In other cases, including the case of an empty array, the specified scopes will replace the original scopes contained in the original
              authorization request.

              Even scopes that are not included in the original authorization request can be specified. However, as an exception, `openid` scope is ignored on the server side
              if it is not included in the original request. It is because the existence of `openid` scope considerably changes the validation steps and because adding `openid`
              triggers generation of an ID token (although the client application has not requested it) and the behavior is a major violation against the specification.

              If you add `offline_access` scope although it is not included in the original request, keep in mind that the specification requires explicit consent from the user
              for the scope ([OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess)).
              When `offline_access` is included in the original request, the current implementation of Authlete's `/auth/authorization` API
              checks whether the request has come along with `prompt` request parameter and the value includes consent.
              However, note that the implementation of Authlete's `/auth/authorization/issue` API does not perform such checking if `offline_access` scope is added via this `scopes` parameter.

            - <u>`sub` (optional)</u><br>
              The value of the `sub` claim in an ID token. If the value of this request parameter is not empty, it is used as the value of the `sub` claim.
              Otherwise, the value of the `subject` request parameter is used as the value of the `sub` claim.
              The main purpose of this parameter is to hide the actual value of the subject from client applications.

              Note that even if this `sub` parameter is not empty, the value of the subject request parameter is used as the value of the subject
              which is associated with the access token.<br>

        **INTERACTION**

        When the value of `action` is `INTERACTION`, it means that the request from the client application has no problem and requires the service to process the request with user interaction by an HTML form.
        The purpose of the UI displayed to the end-user is to ask the end-user to grant authorization to the client application. The items described below are some points which the service implementation
        should take into account when it builds the UI.

        1. [DISPLAY MODE]<br>
          The response from `/auth/authorization` API has `display` parameter. It is one of `PAGE` (default), `POPUP`, `TOUCH` and `WAP` The meanings of the values are described in [3.1.2.1. Authentication Request
          of OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).<br><br>
          Basically, the authorization server implementation should display the UI which is suitable for the display mode, but it is okay for the authorization server implementation to "attempt to detect the capabilities
          of the User Agent and present an appropriate display".<br><br>
          It is ensured that the value of `display` is one of the supported display modes which are specified by `supportedDisplays` configuration parameter of the service.

        2. [UI LOCALE]<br>
          The response from `/auth/authorization` API has `uiLocales` parameter. It it is not `null`, it lists language tag values (such as `fr-CA`, `ja-JP` and `en`) ordered by preference.
          The service implementation should display the UI in one of the language listed in the parameter when possible.<br><br>
          It is ensured that language tags listed in `uiLocales` are contained in the list of supported UI locales which are specified by `supportedUiLocales` configuration parameter of the service.

        3. [CLIENT INFORMATION]<br>
          The authorization server implementation should show information about the client application to the end-user. The information is embedded in client parameter in the response from `/auth/authorization` API.

        4. [SCOPES]<br>
          A client application requires authorization for specific permissions. In OAuth 2.0 specification, "scope" is a technical term which represents a permission.
          `scopes` parameter in the response from `/auth/authorization` API is a list of scopes requested by the client application.
          The service implementation should show the end-user the scopes.<br><br>
          It is ensured that the values in `scopes` parameter are contained in the list of supported scopes which are specified
          by `supportedScopes` configuration parameter of the service.

        5. [AUTHORIZATION DETAILS]<br>
          The authorization server implementation should show the end-user "authorization details" if the request includes it. The value of `uthorization_details` parameter in the response is
          the content of the `authorization_details` request parameter. See "OAuth 2.0 Rich Authorization Requests" for details. (Note that the specification is supported since Authlete 2.2.
          If the Authlete server you are using is older than 2.2, the value of `authorization_details` parameter in the response is always `null`.)

        6. [CLAIMS]<br>
          A client application may require claims of the end-user. In OpenID Connect specification, "claim" is a technical term which represents a piece of information about an end-user.
          `claims` parameter in the response from `/auth/authorization` API is a list of claims requested by the client aplication. The service implementation should show the end-user the claim names.<br><br>
          It is ensured that the values in `claims` parameter are contained in the list of supported claims which are specified by `supportedClaims` configuration parameter of the service.

        7. [END-USER AUTHENTICATION]<br>
          Necessarily, the end-user must be authenticated (= must login the service) before granting authorization to the client application.
          Simply put, a login form is expected to be displayed for end-user authentication.
          The service implementation must follow the steps described below to comply with OpenID Connect. (Or just always show a login form if it's too much of a bother.)<br><br>
          (i) Get the value of `prompts` response parameter. It corresponds to the value of the `prompt` request parameter.
          Details of the request parameter are described in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest) of OpenID Connect Core 1.0.
          (ii) If the value of `prompts` parameter is `SELECT_ACCOUNT` display a form to let the end-user select on of his/her accounts for login.
          If `subject` response parameter is not `null`, it is the end-user ID that the client application expects, so the value should be used to determine the value of the login ID.
          Note that a subject and a login ID are not necessarily equal. If the value of `subject` response parameter is `null`, the value of `loginHint` response parameter should be referred to
          as a hint to determine the value of the login ID. The value of `loginHint` response parameter is simply the value of the `login_hint` request parameter.<br><br>
          (iii) If the value of `prompts` response parameter contains `LOGIN`, display a form to urge the end-user to login even if the end-user has already logged in.
          If `subject` response parameter is not `null`, it is the end-user ID that the client application expects, so the value should be used to determine
          the value of the login ID. Note that a subject and a login ID are not necessarily equal. If `subject` response parameter is `null`,
          The value of `loginHint` response parameter should be referred to as a hint to determine the value of the login ID. The value of `loginHint` response parameter is simply the value of the `login_hint` request parameter.<br><br>
          (iv) If the value of `prompts` response parameter does not contain `LOGIN`, the authorization server implementation does not have to authenticate the end-user if all the conditions described below are satisfied.
          If any one of the conditions is not satisfied, show a login form to authenticate the end-user.<br><br>
          &nbsp;&nbsp;- An end-user has already logged in the service.<br><br>
          &nbsp;&nbsp;- The login ID of the current end-user matches the value of `subject` response parameter. This check is required only when the value of `subject` response parameter is a non-null value.<br><br>
          &nbsp;&nbsp;- The max age, which is the number of seconds contained in `maxAge` response parameter, has not passed since the current end-user logged in your service. This check is required only when `maxAge`
          response parameter is a non-zero value.<br><br>
          &nbsp;&nbsp;- If the authorization server implementation does not manage authentication time of end-users (= if the authorization server implementation cannot know when end-users logged in)
          and if the value of `maxAge` response parameter is a non-zero value, a login form should be displayed.<br><br>
          &nbsp;&nbsp;- The ACR (Authentication Context Class Reference) of the authentication performed for the current end-user satisfies one of the ACRs listed in `acrs` response parameter.
          This check is required only when the value of `acrs` response parameter is a non-empty array.<br><br>
          In every case, the end-user authentication must satisfy one of the ACRs listed in `acrs` response parameter when the value of `acrs` response parameter is a non-empty array and `acrEssential` response parameter is `true`.

        8. [GRANT/DENY BUTTONS]<br>
          The end-user is supposed to choose either (1) to grant authorization to the client applicationor (2) to deny the authorization request.
          The UI must have UI components to accept the judgment by the user. Usually, a button to grant authorization and a button to deny the request are provided.

        When `subject` response parameter is not `null`, the end-user authentication must be performed for the subject, meaning that the authorization server implementation should repeatedly show a login form until the subject is successfully authenticated.

        The end-user will choose either (1) to grant authorization to the client application or (2) to deny the authorization request. When the end-user chose to deny the authorization request, call Authlete's `/auth/authorization/fail` API with `reason=DENIED`
        and use the response from the API to generate a response to the client application.

        When the end-user chose to grant authorization to the client application, the authorization server implementation has to issue an authorization code, an ID token, and/or an access token to the client application.
        (There is a special case. When `response_type=none`, nothing is issued.) Issuing the tokens can be performed by calling Authlete's `/auth/authorization/issue` API.
        Read [ISSUE] written above in the description for the case of `action=NO_INTERACTION`.
        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  required: true
                  description: |
                    OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
                    the authorization server implementation received from the client application.

                    The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
                    or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
                    the client application is `POST`.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1authorization/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - BAD_REQUEST
                          - LOCATION
                          - FORM
                          - NO_INTERACTION
                          - INTERACTION
                        description: The next action that the authorization server implementation should take.
                      client:
                        allOf:
                          - type: object
                            properties:
                              number:
                                type: number
                                format: int32
                                description: The sequential number of the client. The value of this property is assigned by Authlete.
                              serviceNumber:
                                type: number
                                format: int32
                                description: The sequential number of the service of the client application. The value of this property is assigned by Authlete.
                              developer:
                                type: string
                                decription: The developer of the client application.
                              clientName:
                                type: string
                                description: |
                                  The name of the client application. This property corresponds to `client_name` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              clientNames:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/scopes/items/properties/descriptions/items'
                                description: 'Client names with language tags. If the client application has different names for different languages, this property can be used to register the names.'
                              description:
                                type: string
                                description: The description about the client application.
                              descriptions:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/scopes/items/properties/descriptions/items'
                                description: 'Descriptions about the client application with language tags. If the client application has different descriptions for different languages, this property can be used to register the descriptions.'
                              clientId:
                                type: number
                                format: int64
                                description: The client ID. The value of this property is assigned by Authlete.
                              clientSecret:
                                type: string
                                description: |
                                  The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this property is assigned by Authlete.

                                  Note that Authlete issues a client secret even to a "public" client application, but the client application should not use the client secret
                                  unless it changes its client type to "confidential". That is, a public client application should behave as if it had not been issued a client secret.
                                  To be specific, a token request from a public client of Authlete should not come along with a client secret although
                                  [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1) says as follows.

                                  > Confidential clients or other clients issued client credentials MUST authenticate with the authorization server as described in
                                  Section 2.3 when making requests to the token endpoint.
                              clientIdAlias:
                                type: string
                                description: |
                                  The alias of the client ID.

                                  Note that the client ID alias is recognized only when this client's `clientIdAliasEnabled` property is set to true AND the service's
                                  `clientIdAliasEnabled` property is also set to `true`.
                              clientIdAliasEnabled:
                                type: boolean
                                description: |
                                  The flag to indicate whether the client ID alias is enabled or not.

                                  Note that a service also has `clientIdAliasEnabled` property. If the service's `clientIdAliasEnabled` property is set to `false`,
                                  the client ID alias of this client is not recognized even if this client's `clientIdAliasEnabled` property is set to `true`.
                              clientType:
                                type: string
                                description: 'The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1) for details.'
                              applicationType:
                                allOf:
                                  - type: string
                                    enum:
                                      - WEB
                                      - NATIVE
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The application type. The value of this property affects the validation steps for a redirect URI.
                                  See the description about `redirectUris` property for more details.
                              logoUri:
                                type: string
                                description: |
                                  The URL pointing to the logo image of the client application.

                                  This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              logoUris:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/scopes/items/properties/descriptions/items'
                                description: 'Logo image URLs with language tags. If the client application has different logo images for different languages, this property can be used to register URLs of the images.'
                              contacts:
                                type: array
                                items:
                                  type: string
                                description: |
                                  An array of email addresses of people responsible for the client application.

                                  This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              tlsClientCertificateBoundAccessTokens:
                                type: boolean
                                description: |
                                  The flag to indicate whether this client use TLS client certificate bound access tokens.

                                  This property is available since Authlete 2.0.
                              dynamicallyRegistered:
                                type: boolean
                                description: |
                                  The flag to indicate whether this client has been registered dynamically.
                                  For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).

                                  This property is available since Authlete 2.1.
                              softwareId:
                                type: string
                                description: |
                                  The unique identifier string assigned by the client developer or software publisher used by
                                  registration endpoints to identify the client software to be dynamically registered.

                                  This property corresponds to the `software_id metadata` defined in
                                  [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2) of
                                  [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).

                                  This property is available since Authlete 2.1.
                              softwareVersion:
                                type: string
                                description: |
                                  The version identifier string for the client software identified by the software ID.

                                  This property corresponds to the software_version metadata defined in
                                  [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2) of
                                  [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).

                                  This property is available since Authlete 2.1.
                              registrationAccessTokenHash:
                                type: string
                                description: |
                                  The hash of the registration access token for this client.

                                  This property is available since Authlete 2.1.
                              createdAt:
                                type: number
                                format: int64
                                description: The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
                              modifiedAt:
                                type: number
                                format: int64
                                description: The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
                              grantTypes:
                                type: array
                                items:
                                  type: string
                                  enum:
                                    - AUTHORIZATION_CODE
                                    - IMPLICIT
                                    - PASSWORD
                                    - CLIENT_CREDENTIALS
                                    - REFRESH_TOKEN
                                    - CIBA
                                    - DEVICE_CODE
                                description: |
                                  A string array of grant types which the client application declares that it will restrict itself to using.
                                  This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              responseTypes:
                                type: array
                                items:
                                  type: string
                                  enum:
                                    - NONE
                                    - CODE
                                    - TOKEN
                                    - ID_TOKEN
                                    - CODE_TOKEN
                                    - CODE_ID_TOKEN
                                    - ID_TOKEN_TOKEN
                                    - CODE_ID_TOKEN_TOKEN
                                description: |
                                  A string array of response types which the client application declares that it will restrict itself to using.
                                  This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              redirectUris:
                                type: string
                                items:
                                  type: string
                                description: |
                                  Redirect URIs that the client application uses to receive a response from the authorization endpoint.
                                  Requirements for a redirect URI are as follows.

                                  **Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))

                                  - Must be an absolute URI.
                                  - Must not have a fragment component.

                                  **Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), application_type")

                                  - The scheme of the redirect URI used for Implicit Grant by a client application whose application type is `web` must be `https`. This is checked at runtime by Authlete.
                                  - The hostname of the redirect URI used for Implicit Grant by a client application whose application type is `web` must not be `localhost`. This is checked at runtime by Authlete.
                                  - The scheme of the redirect URI used by a client application whose application type is `native` must be either (1) a custom scheme or (2) `http`,
                                  which is allowed only when the hostname part is `localhost`. This is checked at runtime by Authlete.

                                  **Requirements by Authlete**

                                  - Must consist of printable ASCII letters only.
                                  - Must not exceed 200 letters.

                                  Note that Authlete allows the application type to be `null`. In other words, a client application does not have to choose `web` or `native` as its application type.
                                  If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.

                                  An authorization request from a client application which has not registered any redirect URI fails unless at least all the following conditions are satisfied.

                                  - The client type of the client application is `confidential`.
                                  - The value of `response_type` request parameter is `code`.
                                  - The authorization request has the `redirect_uri` request parameter.
                                  - The value of `scope` request parameter does not contain `openid`.

                                  RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2. Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for details),
                                  but OpenID Connect requires exact match.
                              authorizationDataTypes:
                                type: array
                                items:
                                  type: string
                                description: |
                                  The data types that this client may use as values of the type field in `authorization_details`.

                                  This property corresponds to the `authorization_data_types` metadata. See "OAuth 2.0 Rich Authorization Requests" (RAR) for details.

                                  This property is available since Authlete 2.2.
                              authorizationSignAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/2'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/1'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The JWS `alg` algorithm for signing authorization responses.

                                  This property corresponds to `authorization_signed_response_alg` in [5. Client Metadata](https://openid.net/specs/openid-financial-api-jarm.html#client-metadata)
                                  of [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html).

                                  This property is available since Authlete 2.1.
                              authorizationEncryptionAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestEncryptionAlg/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The JWE `alg` algorithm for encryption authorization responses.

                                  This property corresponds to `authorization_encrypted_response_alg` in [5. Client Metadata](https://openid.net/specs/openid-financial-api-jarm.html#client-metadata)
                                  of [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html).

                                  This property is available since Authlete 2.1.
                              authorizationEncryptionEnc:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestEncryptionEnc/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The JWE `enc` algorithm for encryption authorization responses.

                                  This property corresponds to `authorization_encrypted_response_enc` in [5. Client Metadata](https://openid.net/specs/openid-financial-api-jarm.html#client-metadata)
                                  of [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html).

                                  This property is available since Authlete 2.1.
                              tokenAuthMethod:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/service/allOf/0/properties/supportedTokenAuthMethods/items'
                                description: |
                                  The client authentication method that the client application declares that it uses at the token endpoint.
                                  This property corresponds to `token_endpoint_auth_method` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              tokenAuthSignAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/1'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `alg` header parameter of JWS which is used for client authentication at the token endpoint.
                                  Note that this property is used only for the two JWT-based client authentication, namely, `PRIVATE_KEY_JWT` and `CLIENT_SECRET_JWT`.
                                  This property corresponds to `token_endpoint_auth_signing_alg` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              selfSignedCertificateKeyId:
                                type: string
                                description: |
                                  The key ID of a JWK containing a self-signed certificate of this client.

                                  This property is available since Authlete 2.0.
                              tlsClientAuthSubjectDn:
                                type: string
                                description: |
                                  The string representation of the expected subject distinguished name of the certificate this client will use in mutual TLS authentication.

                                  See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client Registration" for details.

                                  This property is available since Authlete 2.0.
                              tlsClientAuthSanDns:
                                type: string
                                description: |
                                  The string representation of the expected DNS subject alternative name of the certificate this client will use in mutual TLS authentication.

                                  See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client Registration" for details.

                                  This property is available since Authlete 2.1.
                              tlsClientAuthSanUri:
                                type: string
                                description: |
                                  The string representation of the expected URI subject alternative name of the certificate this client will use in mutual TLS authentication.

                                  See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client Registration" for details.

                                  This property is available since Authlete 2.1.
                              tlsClientAuthSanIp:
                                type: string
                                description: |
                                  The string representation of the expected IP address subject alternative name of the certificate this client will use in mutual TLS authentication.

                                  See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client Registration" for details.

                                  This property is available since Authlete 2.1.
                              tlsClientAuthSanEmail:
                                type: string
                                description: |
                                  The string representation of the expected email address subject alternative name of the certificate this client will use in mutual TLS authentication.

                                  See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client Registration" for details.

                                  This property is available since Authlete 2.1.
                              parRequired:
                                type: boolean
                                description: |
                                  The flag to indicate whether this client is required to use the pushed authorization request endpoint.
                                  This property corresponds to the `require_pushed_authorization_requests` client metadata defined in "OAuth 2.0 Pushed Authorization Requests".

                                  This property is available since Authlete 2.2.
                              requestObjectRequired:
                                type: boolean
                                description: |
                                  The flag to indicate whether authorization requests from this client are always required to utilize a request object by using either `request` or `request_uri` request parameter.

                                  If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is set to `false`, authorization requests from this client are processed as
                                  if `require_signed_request_object` client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".

                                  This property is available since Authlete 2.2.
                              requestSignAlg:
                                allOf:
                                  - type: string
                                    enum:
                                      - HS256
                                      - HS384
                                      - HS512
                                  - type: string
                                    enum:
                                      - RS256
                                      - RS384
                                      - RS512
                                      - ES256
                                      - ES384
                                      - ES512
                                      - PS256
                                      - PS384
                                      - PS512
                                      - ES256K
                                      - EdDSA
                                  - type: string
                                    enum:
                                      - NONE
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `alg` header parameter of JWS that the client application uses for signing a request object.
                                  If the value of this property is not `null`, request objects sent from the client application must be signed
                                  using the algorithm. Request objects signed by other algorithms are rejected. Note that `null` and `NONE` are different
                                  for this property. If the value of this property indicates an asymmetric signing algorithm, the client application must make available
                                  its JWK Set which contains a public key for the service to verify the signature of the request object at the URL
                                  referred to by its jwksUri configuration property. This property corresponds to `request_object_signing_alg` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).

                                  This property is available since Authlete 2.0.
                              requestEncryptionAlg:
                                allOf:
                                  - type: string
                                    enum:
                                      - RSA1_5
                                      - RSA_OAEP
                                      - RSA_OAEP_256
                                      - A128KW
                                      - A192KW
                                      - A256KW
                                      - DIR
                                      - ECDH_ES
                                      - ECDH_ES_A128KW
                                      - ECDH_ES_A192KW
                                      - ECDH_ES_A256KW
                                      - A128GCMKW
                                      - A192GCMKW
                                      - A256GCMKW
                                      - PBES2_HS256_A128KW
                                      - PBES2_HS384_A192KW
                                      - PBES2_HS512_A256KW
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `alg` header parameter of JWE that the client application uses for encrypting a request object.
                                  Regardless of whether the value of this property is `null` or not, the client application may and may not encrypt a request object.
                                  Furthermore, the client application may use other supported encryption algorithms.

                                  This property corresponds to `request_object_encryption_alg` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              requestEncryptionEnc:
                                allOf:
                                  - type: string
                                    enum:
                                      - A128CBC_HS256
                                      - A192CBC_HS384
                                      - A256CBC_HS512
                                      - A128GCM
                                      - A192GCM
                                      - A256GCM
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `enc` header parameter of JWE that the client application uses for encrypting a request object.

                                  This property corresponds to `request_object_encryption_enc` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                                requestUris:
                                  type: array
                                  items:
                                    type: string
                                  description: |
                                    An array of URLs each of which points to a request object.

                                    Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
                                    This property is used for the pre-registration.
                                    See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
                              defaultMaxAge:
                                type: number
                                format: int32
                                description: |
                                  The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.

                                  This property corresponds to `default_max_age` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              defaultAcrs:
                                type: array
                                items:
                                  type: string
                                description: |
                                  The default ACRs (Authentication Context Class References). This value is used when an authorization request from the client application has neither
                                  `acr_values` request parameter nor `acr` claim in claims request parameter.
                              idTokenSignAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/1'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/2'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of alg header parameter of JWS that the client application requires the service to use for signing an ID token.
                                  `NONE` may be specified, but in that case, the client application cannot obtain an ID token from the service.
                                  That is, an authorization request requesting an ID token fails.

                                  This property corresponds to `id_token_signed_response_alg` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              idTokenEncryptionAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestEncryptionAlg/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `alg` header parameter of JWE that the client application requires the service to use for encrypting an ID token.

                                  If the value of this property indicates an asymmetric encryption algorithm, the client application must make available its JWK Set which contains a public key
                                  for encryption at the URL referred to by its `jwksUri` configuration property.

                                  This property corresponds to `id_token_encrypted_response_alg` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              idTokenEncryptionEnc:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestEncryptionEnc/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `enc` header parameter of JWE that the client application requires the service to use for encrypting an ID token.

                                  This property corresponds to `id_token_encrypted_response_enc` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              authTimeRequired:
                                type: boolean
                                description: |
                                  The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.

                                  This property is set to `true` if the client application requires the `auth_time` claim to be in an ID token.
                                  Regardless of the value of this property, Authlete embeds the `auth_time` claim when authTime parameter in
                                  the `/auth/authorization/issue` request is not `0` and does not do it when `authTime` is `0`.

                                  This property corresponds to `require_auth_time` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              subjectType:
                                allOf:
                                  - type: string
                                    enum:
                                      - PUBLIC
                                      - PAIRWISE
                                description: |
                                  The subject type that the client application requests. Details about the subject type are described in
                                  [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).

                                  Note that `PAIRWISE` is only available since Authlete 2.2.

                                  This property corresponds to `subject_type` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              sectorIdentifier:
                                type: string
                                description: |
                                  The sector identifier which is a URL starting with `https`. This URL is used by the service to calculate pairwise subject values.
                                  See [OpenID Connect Core 1.0, 8.1. Pairwise Identifier Algorithm](https://openid.net/specs/openid-connect-core-1_0.html#PairwiseAlg).

                                  This property corresponds to `sector_identifier_uri` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).

                                  This property is depricated since Authlete 2.1.
                              sectorIdentifierUri:
                                type: string
                                description: |
                                  The value of the sector identifier URI.
                                  This represents the `sector_identifier_uri` client metadata which is defined in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)

                                  This property is available since Authlete 2.1.
                              derivedSectorIdentifier:
                                type: string
                                description: |
                                  The sector identifier host component as derived from either the `sector_identifier_uri` or the registered redirect URI.
                                  If no `sector_identifier_uri` is registered and multiple redirect URIs are also registered, the value of this property is `null`.

                                  This property is available since Authlete 2.2.
                              jwksUri:
                                type: string
                                description: |
                                  The URL pointing to the JWK Set of the client application.
                                  The content pointed to by the URL is JSON which complies with the format described in
                                  [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
                                  The JWK Set must not include private keys of the client application.

                                  If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints) and/or signs request objects,
                                  it must make available its JWK Set containing public keys for the encryption and/or the signature at the URL of `jwksUri`.
                                  The service (Authlete) fetches the JWK Set from the URL as necessary.

                                  [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) says that
                                  `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both properties to be registered at the same time.
                                  However, Authlete does not use the content of `jwks` when `jwksUri` is registered.

                                  This property corresponds to `jwks_uri` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              jwks:
                                type: string
                                description: |
                                  The content of the JWK Set of the client application.
                                  The format is described in
                                  [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
                                  The JWK Set must not include private keys of the client application.

                                  [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) says that
                                  `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both properties to be registered at the same time.
                                  However, Authlete does not use the content of `jwks` when `jwksUri` is registered.

                                  This property corresponds to `jwks_uri` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              userInfoSignAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/1'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/2'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `alg` header parameter of JWS that the client application requires the service to use for signing the JWT returned from the user info endpoint.

                                  If both `userInfoSignAlg` and `userInfoEncryptionAlg` are `null`, the format of the response from the user info endpoint is a plain JSON (not JWT).

                                  Note that `null` and `NONE` are different for this property.

                                  This property corresponds to `userinfo_signed_response_alg` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              userInfoEncryptionAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestEncryptionAlg/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `alg` header parameter of JWE that the client application requires the service to use for encrypting the JWT returned from the user info endpoint.

                                  If the value of this property indicates an asymmetric encryption algorithm, the client application must make available its JWK Set
                                  which contains a public key for encryption at the URL referred to by its `jwksUri` configuration property.

                                  If both `userInfoSignAlg` and `userInfoEncryptionAlg` are `null`, the format of the response from the user info endpoint is a plain JSON (not JWT).

                                  This property corresponds to `userinfo_encrypted_response_alg` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              userInfoEncryptionEnc:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestEncryptionEnc/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The value of `enc` header parameter of JWE that the client application requires the service to use for encrypting the JWT returned from the user info endpoint.

                                  This property corresponds to `userinfo_encrypted_response_enc` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              loginUri:
                                type: string
                                description: |
                                  The URL which a third party can use to initiate a login by the client application.

                                  This property corresponds to `initiate_login_uri` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              tosUri:
                                type: string
                                description: |
                                  The URL pointing to the "Terms Of Service" page.

                                  This property corresponds to `tos_uri` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              tosUris:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/scopes/items/properties/descriptions/items'
                                description: |
                                  URLs of "Terms Of Service" pages with language tags.

                                  If the client application has different "Terms Of Service" pages for different languages,
                                  this property can be used to register the URLs.
                              policyUri:
                                type: string
                                description: |
                                  The URL pointing to the page which describes the policy as to how end-user's profile data is used.

                                  This property corresponds to `policy_uri` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              policyUris:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/scopes/items/properties/descriptions/items'
                                description: |
                                  URLs of policy pages with language tags.
                                  If the client application has different policy pages for different languages, this property can be used to register the URLs.
                              clientUri:
                                type: string
                                description: |
                                  The URL pointing to the home page of the client application.

                                  This property corresponds to `client_uri` in
                                  [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
                              clientUris:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/scopes/items/properties/descriptions/items'
                                description: |
                                  Home page URLs with language tags.
                                  If the client application has different home pages for different languages, this property can be used to register the URLs.
                              bcDeliveryMode:
                                type: string
                                description: |
                                  The backchannel token delivery mode.

                                  This property corresponds to the `backchannel_token_delivery_mode` metadata.
                                  The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated Backchannel Authentication)".

                                  This property is depricated since Authlete 2.1.
                              bcNotificationEndpoint:
                                type: string
                                description: |
                                  The backchannel client notification endpoint.

                                  This property corresponds to the `backchannel_client_notification_endpoint` metadata.
                                  The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated Backchannel Authentication)".

                                  This property is depricated since Authlete 2.1.
                              bcRequestSignAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/0'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/1'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/2'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The signature algorithm of the request to the backchannel authentication endpoint.

                                  This property corresponds to the `backchannel_authentication_request_signing_alg` metadata.
                                  The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated Backchannel Authentication)".

                                  This property is depricated since Authlete 2.1.
                              bcUserCodeRequired:
                                type: boolean
                                description: |
                                  The boolean flag to indicate whether a user code is required when this client makes a backchannel authentication request.

                                  This property corresponds to the `backchannel_user_code_parameter` metadata.

                                  This property is depricated since Authlete 2.1.
                              attributes:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                                description: |
                                  The attributes of this client.

                                  This property is available since Authlete 2.2.
                              extension:
                                allOf:
                                  - type: object
                                    properties:
                                      requestableScopes:
                                        type: array
                                        items:
                                          type: string
                                        description: |
                                          The set of scopes that the client application is allowed to request. This paramter will be one of the following.

                                            - `null`
                                            - an empty set
                                            - a set with at least one element

                                          When the value of this parameter is `null`, it means that the set of scopes that the client application is allowed to request is the set of the scopes that the service supports.
                                          When the value of this parameter is an empty set, it means that the client application is not allowed to request any scopes.
                                          When the value of this parameter is a set with at least one element, it means that the set is the set of scopes that the client application is allowed to request.
                                      requestableScopesEnabled:
                                        type: boolean
                                        description: |
                                          The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you can define the set of scopes which this client application can request.
                                          If `false`, this client application can request any scope which is supported by the authorization server.
                                      accessTokenDuration:
                                        type: number
                                        format: int64
                                        description: |
                                          The value of the duration of access tokens per client in seconds. In normal cases, the value of the service's `accessTokenDuration` property is used
                                          as the duration of access tokens issued by the service. However, if this `accessTokenDuration` property holds a non-zero positive number and its value is
                                          less than the duration configured by the service, the value is used as the duration of access tokens issued to the client application.

                                          Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`, too. Authlete chooses the minimum value among the candidates.

                                          This property is available since Authlete 2.1.
                                      refreshTokenDuration:
                                        type: number
                                        format: int64
                                        description: |
                                          The value of the duration of refresh tokens per client in seconds. In normal cases, the value of the service's `refreshTokenDuration` property is used
                                          as the duration of refresh tokens issued by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number and its value is
                                          less than the duration configured by the service, the value is used as the duration of refresh tokens issued to the client application.

                                          Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`, too. Authlete chooses the minimum value among the candidates.

                                          This property is available since Authlete 2.1.
                                type: null
                                description: |
                                  The extended information about this client.
                        description: Information about the client application which made the authorization request.
                      display:
                        allOf:
                          - type: string
                            enum:
                              - PAGE
                              - POPUP
                              - TOUCH
                              - WAP
                        description: |
                          The display mode which the client application requests by `display` request parameter.
                          When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.

                          It is ensured that the value of `display` is one of the supported display modes which are specified
                          by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
                          authorization request is not supported, an error is raised.

                          Values for this property correspond to the values listed in
                          "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
                      maxAge:
                        type: number
                        format: int32
                        description: |
                          The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
                          of the client application when the authorization request does not contain `max_age` request parameter.

                          See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
                          for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
                          for `defaultMaxAge` configuration parameter.
                      service:
                        allOf:
                          - type: object
                            properties:
                              number:
                                type: integer
                                format: int32
                                description: The sequential number of the service. The value of this property is assigned by Authlete.
                              serviceOwnerNumber:
                                type: integer
                                format: int32
                                description: The sequential number of the service owner of the service. The value of this property is assigned by Authlete.
                              serviceName:
                                type: string
                                description: The name of this service.
                              issuer:
                                type: string
                                description: |
                                  The issuer identifier of the service.

                                  A URL that starts with  https:// and has no query or fragment component. For example, https://example.com

                                  The value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken) and issuer property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              description:
                                type: string
                                description: The description about the service.
                              apiKey:
                                type: number
                                format: int64
                                description: The API key. The value of this property is assigned by Authlete.
                              apiSecret:
                                type: string
                                description: The API secret. A random 256-bit value encoded by base64url (43 letters). The value of this property is assigned by Authlete.
                              clientsPerDeveloper:
                                type: number
                                format: int32
                                description: The maximum number of client applications that a developer is allowed to create. 0 means no limit.
                              clientIdAliasEnabled:
                                type: boolean
                                description: |
                                  The flag to indicate whether the 'Client ID Alias' feature is enabled or not.
                                  When a new client is created, Authlete generates a numeric value and assigns it as a client ID to the newly created client. In addition to the client ID, each client can have a client ID alias. The client ID alias is, however, recognized only when this property (`clientIdAliasEnabled`) is set to `true`.
                              metadata:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                                description: |
                                  The `metadata` of the service. The content of the returned array depends on contexts.
                                  The predefined service metadata is listed in the following table.

                                    | Key | Description |
                                    | --- | --- |
                                    | `clientCount` | The number of client applications which belong to this service.  |
                              createdAt:
                                type: number
                                format: int64
                                description: The time at which this service was created. The value is represented as milliseconds since the UNIX epoch (`1970-01-01`).
                              modifiedAt:
                                type: number
                                format: int64
                                description: The time at which this service was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
                              authenticationCallbackEndpoint:
                                type: string
                                description: |
                                  A Web API endpoint for user authentication which is to be prepared on the service side.

                                  The endpoint must be implemented if you do not implement the UI at the authorization endpoint but use the one provided by Authlete.

                                  The user authentication at the authorization endpoint provided by Authlete is performed by making a POST request to this endpoint.
                                format: uri
                              authenticationCallbackApiKey:
                                type: string
                                description: |
                                  API key for basic authentication at the authentication callback endpoint.

                                  If the value is not empty, Authlete generates Authorization header for Basic authentication when making a request to the authentication callback endpoint.
                              authenticationCallbackApiSecret:
                                type: string
                                description: API secret for `basic` authentication at the authentication callback endpoint.
                              supportedSnses:
                                type: string
                                description: |
                                  SNSes you want to support 'social login' in the UI at the
                                  authorization endpoint provided by Authlete.

                                  You need to register a `client` application in each SNS that is set
                                  as this parameter and set Authlete server's `/api/sns/redirection`
                                  as the redirection endpoint of the client application.
                              snsCredentials:
                                type: string
                                description: '`SNS` credentials which Authlete uses to make requests to SNSes. The format is JSON.'
                              supportedAcrs:
                                type: array
                                items:
                                  type: string
                                description: |
                                  Values of acrs (authentication context class references) that the service supports.

                                  The value of this property is used as `acr_values_supported`
                                  property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              developerAuthenticationCallbackEndpoint:
                                type: string
                                description: |
                                  A Web API endpoint for developer authentication which is to be prepared on the server side.

                                  The endpoint must be implemented if you use Developer Console.

                                  The developer authentication at the login page of Developer Console is performed by making a POST request to this endpoint.
                                format: uri
                              developerAuthenticationCallbackApiKey:
                                type: string
                                description: |
                                  API key for basic authentication at the developer authentication callback endpoint.

                                  If the value is not empty, Authlete generates Authorization header for Basic authentication when making a request to the developer authentication callback endpoint.
                              developerAuthenticationCallbackApiSecret:
                                type: string
                                description: API secret for basic authentication at the developer authentication callback endpoint.
                              supportedDeveloperSnses:
                                type: array
                                items:
                                  type: string
                                  enum:
                                    - FACEBOOK
                                description: |
                                  SNSes you want to support 'social login' in the login page of Developer Console provided by Authlete.

                                  You need to register a client application in each SNS checked here and set Authlete server's `/api/developer/sns/redirection` as the redirection endpoint of the client application.
                              developerSnsCredentials:
                                type: string
                                description: SNS credentials which Authlete uses to make requests to SNSes. The format is JSON.
                              supportedGrantTypes:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/grantTypes/items'
                                description: |
                                  Values of `grant_type` request parameter that the service supports.

                                  The value of this property is used as `grant_types_supported property` in the
                                  [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              supportedResponseTypes:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/responseTypes/items'
                                description: |
                                  Values of `response_type` request parameter that
                                  the service supports. Valid values are listed in Response Type.

                                  The value of this property is used as `response_types_supported` property in the
                                  [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              supportedAuthorizationDataTypes:
                                type: array
                                items:
                                  type: string
                                description: |
                                  The supported data types that can be used as values of the type field in `authorization_details`.

                                  This property corresponds to the `authorization_data_types_supported` metadata. See "OAuth 2.0 Rich Authorization Requests" (RAR) for details.

                                  This property is available since Authlete 2.2.
                              supportedServiceProfiles:
                                type: array
                                items:
                                  type: string
                                  enum:
                                    - FAPI
                                    - OPEN_BANKING
                                description: |
                                  The profiles that this service supports.

                                  This property is available since Authlete 2.0.
                              errorDescriptionOmitted:
                                type: boolean
                                description: |
                                  The flag to indicate whether the `error_description` response parameter is omitted.

                                  According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_description` response parameter in error responses.

                                  If `true`, Authlete does not embed the `error_description` response parameter in error responses.
                              errorUriOmitted:
                                type: boolean
                                description: |
                                  The flag to indicate whether the `error_uri` response parameter is omitted.

                                  According to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.

                                  If `true`, Authlete does not embed the
                                  `error_uri` response parameter in error responses.
                              authorizationEndpoint:
                                type: string
                                description: |
                                  The authorization endpoint of the service.

                                  A URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.

                                  The value of this property is used as `authorization_endpoint` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                                format: uri
                              directAuthorizationEndpointEnabled:
                                type: boolean
                                description: |
                                  The flag to indicate whether the direct authorization endpoint is enabled or not.

                                  The path of the endpoint is `/api/auth/authorization/direct/service-api-key`.
                              supportedUiLocales:
                                type: array
                                items:
                                  type: string
                                description: |
                                  UI locales that the service supports.

                                  Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.

                                  The value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              supportedDisplays:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/display/allOf/0'
                                description: |
                                  Values of `display` request parameter that service supports.

                                  The value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              pkceRequired:
                                type: boolean
                                description: |
                                  The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.

                                  If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.

                                  See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
                              pkce256Required:
                                type: boolean
                                description: |
                                  The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.

                                  If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
                                  whenever it includes the `code_challenge` request parameter.
                                  Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.

                                  This property is available since Authlete 2.1.
                              authorizationResponseDuration:
                                type: integer
                                format: int64
                                description: |
                                  The duration of authorization response JWTs.

                                  [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html) defines
                                  new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`, `form_post.jwt` and `jwt`.
                                  If one of them is specified as the response mode, response parameters from the authorization endpoint will be packed into a JWT.
                                  This property is used to compute the value of the `exp` claim of the JWT.

                                  This property is available since Authlete 2.1.
                              tokenEndpoint:
                                type: string
                                format: uri
                                description: |
                                  The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.

                                  A URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.

                                  The value of this property is used as `token_endpoint` property in the
                                  [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              directTokenEndpointEnabled:
                                type: boolean
                                description: The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint is `/api/auth/token/direct/service-api-key`.
                              supportedTokenAuthMethods:
                                type: array
                                items:
                                  type: string
                                  enum:
                                    - NONE
                                    - CLIENT_SECRET_BASIC
                                    - CLIENT_SECRET_BASIC
                                    - CLIENT_SECRET_JWT
                                    - PRIVATE_KEY_JWT
                                    - TLS_CLIENT_AUTH
                                    - SELF_SIGNED_TLS_CLIENT_AUTH
                                description: |
                                  Client authentication methods supported by the token endpoint of the service.

                                  Note that `CLIENT_SECRET_JWT` and `PRIVATE_KEY_JWT` are only supported since Authlete 2.0.

                                  The value of this property is used as `token_endpoint_auth_methods_supports` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              missingClientIdAllowed:
                                type: boolean
                                description: |
                                  The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.

                                  This flag should not be set unless you have special reasons.

                                  This property is available since Authlete 2.1.
                              revocationEndpoint:
                                type: string
                                format: uri
                                description: |
                                  The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.

                                  A URL that starts with `https://`. For example, `https://example.com/auth/revocation`.
                              directRevocationEndpointEnabled:
                                type: boolean
                                description: 'The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. '
                              supportedRevocationAuthMethods:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/service/allOf/0/properties/supportedTokenAuthMethods/items'
                                description: |
                                  Client authentication methods supported at the revocation endpoint.

                                  This property is available since Authlete 2.0.
                              introspectionEndpoint:
                                type: string
                                description: The URI of the introspection endpoint.
                                format: uri
                              directIntrospectionEndpointEnabled:
                                type: boolean
                                description: 'The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. '
                              supportedIntrospectionAuthMethods:
                                type: array
                                description: |
                                  Client authentication methods supported at the introspection endpoint.

                                  This property is available since Authlete 2.0.
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/service/allOf/0/properties/supportedTokenAuthMethods/items'
                              pushedAuthReqEndpoint:
                                type: string
                                description: |
                                  The URI of the pushed authorization request endpoint.

                                  This property corresponds to the `pushed_authorization_request_endpoint` metadata defined in "[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)" of OAuth 2.0 Pushed Authorization Requests.

                                  This property is available since Authlete 2.2.
                                format: uri
                              pushedAuthReqDuration:
                                type: integer
                                format: int64
                                description: |
                                  The duration of pushed authorization requests.

                                  [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par) defines an endpoint (called "pushed authorization request endpoint") which client applications can register authorization requests into and get corresponding URIs (called "request URIs") from. The issued URIs represent the registered authorization requests. The client applications can use the URIs as the value of the `request_uri` request parameter in an authorization request.

                                  The property represents the duration of registered authorization requests and is used as the value of the `expires_in` parameter in responses from the pushed authorization request endpoint.

                                  This property is available since Authlete 2.2.
                              parRequired:
                                type: boolean
                                description: |
                                  The flag to indicate whether this service requires that clients use the pushed authorization request endpoint.

                                  This property corresponds to the `require_pushed_authorization_requests` server metadata defined in [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).

                                  This property is available since Authlete 2.2.
                              requestObjectRequired:
                                type: boolean
                                description: |
                                  The flag to indicate whether this service requires that authorization requests always utilize a request object by using either request or `request_uri` request parameter.

                                  If this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is `false`, the value of `require_signed_request_object` server metadata of this service is reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request). That `require_signed_request_object` is `true` means that authorization requests which don't conform to the JAR specification are rejected.

                                  This property is available since Authlete 2.2.
                              traditionalRequestObjectProcessingApplied:
                                type: boolean
                                description: |
                                  The flag to indicate whether a request object is processed based on rules defined in
                                  [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT Secured Authorization Request).

                                  Differences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.
                                    - JAR requires that a request object be always -signed.
                                    - JAR does not allow request parameters outside a request object to be referred to.
                                    - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.
                                    - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an
                                    - OIDC request even if the request object includes the request parameter.

                                  If this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of `require_signed_request_object` server metadata of this service
                                  is reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).
                                  That `require_signed_request_object` is `true` means that authorization requests which don't conform to the JAR specification are rejected.

                                  This property is available since Authlete 2.2.
                              mutualTlsValidatePkiCertChain:
                                type: boolean
                                description: |
                                  The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.

                                  This property is available since Authlete 2.0.
                              trustedRootCertificates:
                                type: array
                                items:
                                  type: string
                                description: |
                                  The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.

                                  This property is available since Authlete 2.0.
                              mtlsEndpointAliases:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                    uri:
                                      type: string
                                      format: uri
                                description: |
                                  The MTLS endpoint aliases.

                                  This property corresponds to the mtls_endpoint_aliases metadata defined in "5. Metadata for Mutual TLS Endpoint Aliases" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).

                                  The aliases will be embedded in the response from the discovery endpoint like the following.

                                  ```json
                                  {
                                    ......,
                                    "mtls_endpoint_aliases": {
                                      "token_endpoint":         "https://mtls.example.com/token",
                                      "revocation_endpoint":    "https://mtls.example.com/revo",
                                      "introspection_endpoint": "https://mtls.example.com/introspect"
                                    }
                                  }
                                  ```

                                  This property is available since Authlete 2.1.
                              accessTokenType:
                                type: string
                                description: |
                                  The access token type.

                                  This value is used as the value of `token_type` property in access token responses. If this service complies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should be `Bearer`.

                                  See [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.
                              tlsClientCertificateBoundAccessTokens:
                                type: boolean
                                description: |
                                  The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.

                                  This property is available since Authlete 2.0.
                              accessTokenDuration:
                                type: integer
                                format: int64
                                description: 'The duration of access tokens in seconds. This value is used as the value of `expires_in` property in access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1). '
                              singleAccessTokenPerSubject:
                                type: boolean
                                description: |
                                  The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.

                                  If `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.

                                  Note that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.
                              accessTokenSignAlg:
                                allOf:
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/2'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/client/allOf/0/properties/requestSignAlg/allOf/1'
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The signature algorithm of access tokens.

                                  When `null` is set, access tokens issued by this service are just random strings.
                                  On the other hand, when a `non-null` value is set, access tokens issued by this service are JWTs
                                  and the value of this property is used as the signature algorithm of the JWTs.

                                  This property is available since Authlete 2.1. Note that access tokens generated by older Authlete versions are always random strings.
                              accessTokenSignatureKeyId:
                                type: string
                                description: |
                                  The key ID to identify a JWK used for signing access tokens.

                                  A JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs. Authlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based access token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions for access token signature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.

                                  This property is available since Authlete 2.1.
                              refreshTokenDuration:
                                type: integer
                                format: int64
                                description: 'The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens.'
                              refreshTokenDurationKept:
                                type: boolean
                                description: |
                                  The flag to indicate whether the remaining duration of the used refresh token is taken over to the newly issued refresh token.

                                  This property is available since Authlete 2.1.
                              refreshTokenKept:
                                type: boolean
                                description: |
                                  The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.

                                  If `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.

                                  See [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.

                                  This property is available since Authlete 2.0.
                              supportedScopes:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/scopes/items'
                                description: |
                                  Scopes supported by the service.

                                  Authlete strongly recommends that the service register at least the following scopes.

                                  | Name | Description |
                                  | --- | --- |
                                  | openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |
                                  | profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
                                  | email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
                                  | address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |
                                  | phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |
                                  | offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |

                                  The value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              scopeRequired:
                                type: boolean
                                description: |
                                  The flag to indicate whether requests that request no scope are rejected or not.

                                  When a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,
                                  the authorization server regards the request requests no scope. When this flag is set to `true`,
                                  requests that request no scope are rejected.

                                  The requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)
                                  does not explicitly mention the case where the default scope set is empty.

                                  > If the client omits the scope parameter when requesting authorization, the authorization server
                                  MUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.

                                  However, if you interpret *"the default scope set exists but is empty"* as *"the default scope set does not exist"*
                                  and want to strictly conform to the requirement above, this flag has to be `true`.

                                  This property is available since Authlete 2.1.
                              idTokenDuration:
                                type: integer
                                format: int64
                                description: 'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s in seconds. This value is used to calculate the value of `exp` claim in an ID token.'
                              allowableClockSkew:
                                type: integer
                                format: int32
                                description: |
                                  The allowable clock skew between the server and clients in seconds.

                                  The clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.

                                  This property is available since Authlete 2.1.
                              supportedClaimTypes:
                                type: array
                                items:
                                  type: string
                                  enum:
                                    - NORMAL
                                    - AGGREGATED
                                    - DISTRIBUTED
                                description: |
                                  Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete currently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.

                                  The value of this property is used as `claim_types_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              supportedClaimLocales:
                                type: array
                                items:
                                  type: string
                                description: |
                                  Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts) for details.

                                  The value of this property is used as `claims_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              supportedClaims:
                                type: array
                                items:
                                  type: string
                                description: |
                                  Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0, 5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should be supported. The following is the list of standard claims.

                                  - `sub`
                                  - `name`
                                  - `given_name`
                                  - `family_name`
                                  - `middle_name`
                                  - `nickname`
                                  - `preferred_username`
                                  - `profile`
                                  - `picture`
                                  - `website`
                                  - `email`
                                  - `email_verified`
                                  - `gender`
                                  - `birthdate`
                                  - `zoneinfo`
                                  - `locale`
                                  - `phone_number`
                                  - `phone_number_verified`
                                  - `address`
                                  - `updated_at`

                                  The value of this property is used as `claims_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).

                                  The service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).
                              claimShortcutRestrictive:
                                type: boolean
                                description: |
                                  The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included in the issued ID token only when no access token is issued.

                                  To strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section 5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.

                                  > The Claims requested by the profile, email, address, and phone scope values are returned from the UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that results in an Access Token being issued. However, when no Access Token is issued (which is the case for the response_type value id_token), the resulting Claims are returned in the ID Token.

                                  This property is available since Authlete 2.1.
                              jwksUri:
                                type: string
                                format: uri
                                description: |
                                  The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For example, `http://example.com/auth/jwks`.

                                  Client applications accesses this URL (1) to get the public key of the service to validate the signature of an ID token issued by the service and (2) to get the public key of the service to encrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures and Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.

                                  The value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                              directJwksEndpointEnabled:
                                type: boolean
                                description: 'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint is `/api/service/jwks/get/direct/service-api-key`. '
                              jwks:
                                type: string
                                description: |
                                  The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.

                                  If this property is not `null` in a `/service/create` request or a `/service/update` request, Authlete hosts the content in the database. This property must not be `null` and must contain pairs of public/private keys if the service wants to support asymmetric signatures for ID tokens and asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.
                              idTokenSignatureKeyId:
                                type: string
                                description: |
                                  The key ID to identify a JWK used for ID token signature using an asymmetric key.

                                  A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has to pick up one JWK for signature from the JWK Set when it generates an ID token and signature using an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions for ID token signature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.

                                  This `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)), this mechanism is needed.
                              userInfoSignatureKeyId:
                                type: string
                                description: |
                                  The key ID to identify a JWK used for user info signature using an asymmetric key.

                                  A JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs (See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has to pick up one JWK for signature from the JWK Set when it is required to sign user info (which is returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo)) using an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions for user info signature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.

                                  This `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation (OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)), this mechanism is needed.
                              authorizationSignatureKeyId:
                                type: string
                                description: |
                                  The key ID to identify a JWK used for signing authorization responses using an asymmetric key.

                                  [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html) defines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`, `form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters from the authorization endpoint will be packed into a JWT. This property is used to compute the value of the `exp` claim of the JWT.

                                  Authlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response signature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates. This property exists to specify the key ID.

                                  This property is available since Authlete 2.1.
                              userInfoEndpoint:
                                type: string
                                description: |
                                  The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the service. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.

                                  The value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                                format: uri
                              directUserInfoEndpointEnabled:
                                type: boolean
                                description: The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/service-api-key`.
                              dynamicRegistrationSupported:
                                type: boolean
                                description: |
                                  The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591) is supported.

                                  This property is available since Authlete 2.1.
                              registrationEndpoint:
                                type: string
                                description: |
                                  The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration) of the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.

                                  The value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).

                                  This property is available since Authlete 2.1.
                                format: uri
                              registrationManagementEndpoint:
                                type: string
                                description: |
                                  The URI of the registration management endpoint. If dynamic client registration is supported, and this is set, this URI will be used as the basis of the client's management endpoint by appending `/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will be used as the URI base instead.

                                  This property is available since Authlete 2.1.
                                format: uri
                              policyUri:
                                type: string
                                description: |
                                  The URL of the "Policy" of the service.

                                  The value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                                format: uri
                              tosUri:
                                type: string
                                description: |
                                  The URL of the "Terms Of Service" of the service.

                                  The value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                                format: uri
                              serviceDocumentation:
                                type: string
                                description: |
                                  The URL of a page where documents for developers can be found.

                                  The value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
                                format: uri
                              backchannelAuthenticationEndpoint:
                                type: string
                                description: |
                                  The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA (Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).

                                  This property is available since Authlete 2.1.
                                format: uri
                              supportedBackchannelTokenDeliveryModes:
                                type: array
                                items:
                                  type: string
                                  enum:
                                    - PING
                                    - POLL
                                    - PUSH
                                description: |
                                  The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported` metadata.

                                  Backchannel token delivery modes are defined in the specification of [CIBA (Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).

                                  This property is available since Authlete 2.1.
                              backchannelAuthReqIdDuration:
                                type: integer
                                format: int32
                                description: |
                                  The duration of backchannel authentication request IDs issued from the backchannel authentication endpoint in seconds. This is used as the value of the `expires_in` property in responses from the backchannel authentication endpoint.

                                  This property is available since Authlete 2.1.
                              backchannelPollingInterval:
                                type: integer
                                description: |
                                  The minimum interval between polling requests to the token endpoint from client applications in seconds. This is used as the value of the `interval` property in responses from the backchannel authentication endpoint.

                                  This property is available since Authlete 2.1.
                                format: int32
                              backchannelUserCodeParameterSupported:
                                description: |
                                  The boolean flag which indicates whether the `user_code` request parameter is supported at the backchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported` metadata.

                                  This property is available since Authlete 2.1.
                                type: boolean
                              backchannelBindingMessageRequiredInFapi:
                                type: boolean
                                description: |
                                  The flag to indicate whether the `binding_message` request parameter is always required whenever a backchannel authentication request is judged as a request for Financial-grade API.

                                  The FAPI-CIBA profile requires that the authorization server _"shall ensure unique authorization context exists in the authorization request or require a `binding_message` in the authorization request"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property to `true`.

                                  If this property is set to `false`, the `binding_message` request parameter remains optional even in FAPI context, but in exchange, your authorization server must implement a custom mechanism that ensures each backchannel authentication request has unique context.

                                  This property is available since Authlete 2.1.
                              deviceAuthorizationEndpoint:
                                type: string
                                format: uri
                                description: |
                                  The URI of the device authorization endpoint.

                                  Device authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.

                                  This property is available since Authlete 2.1.
                              deviceVerificationUri:
                                type: string
                                format: uri
                                description: |
                                  The verification URI for the device flow. This URI is used as the value of the `verification_uri` parameter in responses from the device authorization endpoint.

                                  This property is available since Authlete 2.1.
                              deviceVerificationUriComplete:
                                type: string
                                format: uri
                                description: |
                                  The verification URI for the device flow with a placeholder for a user code. This URI is used to build the value of the `verification_uri_complete` parameter in responses from the device authorization endpoint.

                                  It is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for a user code. For example, like the following.

                                  `https://example.com/device?user\_code=USER\_CODE`

                                  The fixed string is replaced with an actual user code when Authlete builds a verification URI with a user code for the `verification_uri_complete` parameter.

                                  If this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization responses.

                                  This property is available since Authlete 2.1.
                              deviceFlowCodeDuration:
                                type: integer
                                format: int32
                                description: The duration of device verification codes and end-user verification codes issued from the device authorization endpoint in seconds. This is used as the value of the `expires_in` property in responses from the device authorization endpoint.
                              deviceFlowPollingInterval:
                                type: integer
                                format: int32
                                description: |
                                  The minimum interval between polling requests to the token endpoint from client applications in seconds in device flow. This is used as the value of the `interval` property in responses from the device authorization endpoint.

                                  This property is available since Authlete 2.1.
                              userCodeCharset:
                                allOf:
                                  - type: string
                                    enum:
                                      - BASE20
                                      - NUMERIC
                                  - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/1'
                                description: |
                                  The character set for end-user verification codes (`user_code`) for Device Flow.

                                  This property is available since Authlete 2.1.
                              userCodeLength:
                                type: integer
                                format: int32
                                description: |
                                  The length of end-user verification codes (`user_code`) for Device Flow.

                                  This property is available since Authlete 2.1.
                              supportedTrustFrameworks:
                                type: array
                                items:
                                  type: string
                                description: |
                                  Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).

                                  This property is available since Authlete 2.2.
                              supportedEvidence:
                                type: array
                                items:
                                  type: string
                                description: |
                                  Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).

                                  This property is available since Authlete 2.2.
                              supportedIdentityDocuments:
                                type: array
                                items:
                                  type: string
                                description: |
                                  Identity documents supported by this service. This corresponds to the `id_documents_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).

                                  This property is available since Authlete 2.2.
                              supportedVerificationMethods:
                                type: array
                                items:
                                  type: string
                                description: |
                                  Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).

                                  This property is available since Authlete 2.2.
                              supportedVerifiedClaims:
                                type: array
                                items:
                                  type: string
                                description: |
                                  Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).

                                  This property is available since Authlete 2.2.
                              attributes:
                                type: array
                                items:
                                  $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                                description: |
                                  The attributes of this service.

                                  This property is available since Authlete 2.2.
                            x-examples:
                              example-1:
                                number: 2
                                serviceOwnerNumber: 1
                                serviceName: string
                                issuer: string
                                description: string
                                apiKey: 0
                                apiSecret: string
                                clientsPerDeveloper: 0
                                clientIdAliasEnabled: true
                                metadata:
                                  - key: string
                                    value: string
                                    hidden: true
                                createdAt:
                                  - 0
                                modifiedAt: 0
                                authenticationCallbackEndpoint: string
                                authenticationCallbackApiKey: string
                                authenticationCallbackApiSecret: string
                                supportedSnses: string
                                snsCredentials: string
                                supportedAcrs:
                                  - string
                                developerAuthenticationCallbackEndpoint: string
                                developerAuthenticationCallbackApiKey: string
                                developerAuthenticationCallbackApiSecret: string
                                supportedDeveloperSnses:
                                  - FACEBOOK
                                developerSnsCredentials: string
                                supportedGrantTypes:
                                  - AUTHORIZATION_CODE
                                supportedResponseTypes:
                                  - NONE
                                supportedAuthorizationDataTypes:
                                  - string
                                supportedServiceProfiles:
                                  - FAPI
                                errorDescriptionOmitted: true
                                errorUriOmitted: true
                                authorizationEndpoint: string
                                directAuthorizationEndpointEnabled: true
                                supportedUiLocales:
                                  - string
                                supportedDisplays:
                                  - PAGE
                                pkceRequired: true
                                pkce256Required: true
                                authorizationResponseDuration: 0
                                tokenEndpoint: string
                                directTokenEndpointEnabled: true
                                supportedTokenAuthMethods:
                                  - NONE
                                missingClientIdAllowed: true
                                revocationEndpoint: string
                                directRevocationEndpointEnabled: true
                                supportedRevocationAuthMethods:
                                  - NONE
                                introspectionEndpoint: string
                                directIntrospectionEndpointEnabled: true
                                supportedIntrospectionAuthMethods:
                                  - NONE
                                pushedAuthReqEndpoint: string
                                pushedAuthReqDuration: 0
                                parRequired: true
                                requestObjectRequired: true
                                traditionalRequestObjectProcessingApplied: true
                                mutualTlsValidatePkiCertChain: true
                                trustedRootCertificates:
                                  - string
                                mtlsEndpointAliases:
                                  - name: string
                                    uri: 'http://example.com'
                                accessTokenType: string
                                tlsClientCertificateBoundAccessTokens: true
                                accessTokenDuration: 0
                                singleAccessTokenPerSubject: true
                                accessTokenSignAlg: RS256
                                accessTokenSignatureKeyId: string
                                refreshTokenDuration: 0
                                refreshTokenDurationKept: true
                                refreshTokenKept: true
                                supportedScopes:
                                  - name: string
                                    defaultEntry: true
                                    description: string
                                    descriptions:
                                      - tag: string
                                        value: string
                                    attributes:
                                      - key: string
                                        value: string
                                        hidden: true
                                scopeRequired: true
                                idTokenDuration: 0
                                allowableClockSkew: 0
                                supportedClaimTypes:
                                  - string
                                supportedClaimLocales:
                                  - string
                                supportedClaims:
                                  - string
                                claimShortcutRestrictive: true
                        description: Information about the service to which the authorization request was made.
                      scopes:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The name of the scope.
                            defaultEntry:
                              type: boolean
                              description: '`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. '
                            description:
                              type: string
                              description: The description about the scope.
                            descriptions:
                              type: array
                              description: The descriptions about this scope in multiple languages.
                              items:
                                type: object
                                properties:
                                  tag:
                                    type: string
                                    description: The language tag part.
                                  value:
                                    type: string
                                    description: The value part.
                            attributes:
                              type: array
                              description: |-
                                The attributes of the scope.

                                This property is available since Authlete 2.1.
                              items:
                                $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                        description: |
                          The scopes that the client application requests. This value comes from `scope` request parameter.
                          If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
                          If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
                          the value of this parameter is `null`.

                          It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
                          by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
                          an error and are just ignored.

                          OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.

                          | Name | Description |
                          | --- | --- |
                          | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
                          | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
                          | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
                          | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).<br><br> The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
                          | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
                          | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). <blockquote>This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).</blockquote>  |

                          Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
                          when scope request parameter contains `offline_access`. This behavior is a requirement written in
                          [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
                      uiLocales:
                        type: array
                        items:
                          type: string
                        description: |
                          The locales that the client application presented as candidates to be used for UI.
                          This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
                          defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
                          See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.

                          It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
                          by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
                          cause an error and are just ignored.
                      claimsLocales:
                        type: array
                        items:
                          type: string
                        description: |
                          End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
                          The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
                          See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.

                          It is ensured that locales listed by this parameters are contained in the list of supported claim locales
                          which are specified by `supportedClaimsLocales` configuration parameter of the service.
                          Unsupported claim locales in the authorization request do not cause an error and are just ignored.
                      claims:
                        type: array
                        items:
                          type: string
                        description: |
                          The list of claims that the client application requests to be embedded in the ID token.
                          The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
                          which are expanded to claims.

                          See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
                          for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
                          for the special scopes.
                      acrEssential:
                        type: boolean
                        description: |
                          This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
                          This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
                          the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
                      clientIdAliasUsed:
                        type: boolean
                        description: |
                          `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
                          `false` if the value is the original numeric client ID.
                      acrs:
                        type: array
                        items:
                          type: string
                        description: |
                          The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
                          This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.

                          See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
                          request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
                          default_acr_values" for `defaultAcrs` configuration parameter.
                      subject:
                        type: string
                        description: |
                          The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
                          The value comes from `sub` claim in `claims` request parameter.
                      loginHint:
                        type: string
                        description: A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
                      prompts:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/paths/~1auth~1authorization/post/responses/200/content/application~1json/schema/allOf/1/properties/lowestPrompt/allOf/0'
                            - type: string
                              enum:
                                - NONE
                        description: 'The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.'
                      lowestPrompt:
                        allOf:
                          - type: string
                            enum:
                              - LOGIN
                              - CONSENT
                              - SELECT_ACCOUNT
                          - type: string
                            nullable: true
                            enum:
                              - 'null'
                        description: |
                          The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.

                          When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.

                          See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
                      requestObjectPayload:
                        type: string
                        description: |
                          The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
                      idTokenClaims:
                        type: string
                        description: |
                          The value of the `id_token` property in the claims request parameter or in the claims property in a request object.

                          A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
                          There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
                          In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
                          Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).

                          The following is an excerpt from the specification.
                          You can find `userinfo` and `id_token` are top-level properties.

                          ```json
                          {
                            "userinfo":
                            {
                              "given_name": { "essential": true },
                              "nickname": null,
                              "email": { "essential": true },
                              "email_verified": { "essential": true },
                              "picture": null,
                              "http://example.info/claims/groups": null
                            },
                            "id_token":
                            {
                              "auth_time": { "essential": true },
                              "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                            }
                          }
                          ```

                          This value of this property is the value of the `id_token` property in JSON format.
                          For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.

                          ```json
                          {
                            "auth_time": { "essential": true },
                            "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                          }
                          ```

                          Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
                          this property holds the former value.
                      userInfoClaims:
                        type: string
                        description: |
                          The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.

                          A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
                          There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
                          In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
                          Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).

                          The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.

                          ```json
                          {
                            "userinfo":
                            {
                              "given_name": { "essential": true },
                              "nickname": null,
                              "email": { "essential": true },
                              "email_verified": { "essential": true },
                              "picture": null,
                              "http://example.info/claims/groups": null
                            },
                            "id_token":
                            {
                              "auth_time": { "essential": true },
                              "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                            }
                          }
                          ````

                          The value of this property is the value of the `userinfo` property in JSON format.
                          For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.

                          ```json
                          {
                            "given_name": { "essential": true },
                            "nickname": null,
                            "email": { "essential": true },
                            "email_verified": { "essential": true },
                            "picture": null,
                            "http://example.info/claims/groups": null
                          }
                          ```

                          Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
                          the value of this property holds the former value.
                      resources:
                        type: string
                        description: |
                          The resources specified by the `resource` request parameters or by the `resource` property in the request object.
                          If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.

                          This property is available since Authlete 2.2.
                      authorizationDetails:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/authorizationDetails/items'
                        description: |
                          The authorization details. This represents the value of the `authorization_details` request parameter in the preceding device authorization request
                          which is defined in "OAuth 2.0 Rich Authorization Requests".

                          This property is available since Authlete 2.2.
                      purpose:
                        type: string
                        description: |
                          The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
                          of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:

                          > purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
                          If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.

                          This property is available since Authlete 2.2.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation is to return to the client application.
                          Its format varies depending on the value of `action` parameter.
                      ticket:
                        type: string
                        description: |
                          A ticket issued by Authlete to the service implementation. This is needed when the service implementation calls either `/auth/authorization/fail` API
                          or `/auth/authorization/issue` API.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/authorization \
            -H 'Content-Type: application/json' \
            -u '10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE' \
            -d '{ "parameters": "response_type=code&client_id=57297408867&redirect_uri=https://api.authlete.com/api/mock/redirection/10167240235" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            AuthorizationRequest req = new AuthorizationRequest();
            req.setParameters(...);

            api.authorization(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            AuthorizationRequest req = new AuthorizationRequest();
            req.Parameters = ...;

            await api.Authorization(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new AuthorizationRequest();
            $req.setParameters(...);

            $api.authorization($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::AuthorizationRequest.new
            req.parameters = '...'

            api.authorization(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = AuthorizationRequest()
            req.parameters = ...

            api.authorization(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.AuthorizationRequest{}
            req.Parameters = ...

            api.Authorization(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new AuthorizationRequest();
            req.parameters = ...;

            await api.authorization(req);
      tags:
        - Authorization Endpoint
  /auth/authorization/fail:
    post:
      summary: /auth/authorization/fail API
      description: |
        This API generates a content of an error authorization response that the authorization server implementation
        returns to the client application.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the authorization endpoint of the service
        in order to generate an error response to the client application.

        The description of the `/auth/authorization` API describes the timing when this API should be called.

        The response from `/auth/authorization/fail` API has some parameters.
        Among them, it is `action` parameter that the authorization server implementation should check first because
        it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of action is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.

        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".
        Authlete recommends `application/json` as the content type.

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since "500 Internal Server Error"
        is not required by OAuth 2.0.

        **BAD_REQUEST**

        When the value of action is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted or expired) and
        that the reason of the invalidity was probably due to the end-user's too-delayed response to the authorization UI.

        A response with HTTP status of "400 Bad Request" should be returned to the client application and Authlete recommends
        `application/json` as the content type.

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since "400 Bad Request" is not required by OAuth 2.0.

        **LOCATION**

        When the value of action is `LOCATION`, it means that the response to the client application must be "302 Found" with Location header.

        The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token and/or an access token (on success) or
        (2) an error code (on failure), so it can be used as the value of `Location` header.

        The following illustrates the response which the service implementation must generate and return to the client application.

        ```http
        HTTP/1.1 302 Found
        Location: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORM**

        When the value of action is `FORM`, it means that the response to the client application must be 200 OK
        with an HTML which triggers redirection by JavaScript.
        This happens when the authorization request from the client application contained `response_mode=form_post`.

        The parameter `responseContent` contains an HTML which can be used as the entity body of the response.

        The following illustrates the response which the service implementation must generate and return to the client application.

        ```http
        HTTP/1.1 200 OK
        Content-Type: text/html;charset=UTF-8
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - resason
              properties:
                ticket:
                  type: string
                  required: true
                  description: |
                    The ticket issued from Authlete `/auth/authorization` API.
                reason:
                  type: string
                  enum:
                    - UNKNOWN
                    - NOT_LOGGED_IN
                    - MAX_AGE_NOT_SUPPORTED
                    - EXCEEDS_MAX_AGE
                    - DIFFERENT_SUBJECT
                    - ACR_NOT_SATISFIED
                    - DENIED
                    - SERVER_ERROR
                    - NOT_AUTHENTICATED
                    - ACCOUNT_SELECTION_REQUIRED
                    - CONSENT_REQUIRED
                    - INTERACTION_REQUIRED
                    - INVALID_TARGET (Available since Authlete 2.2)
                  required: true
                  description: |
                    The reason of the failure of the authorization request.
                    For more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.
                description:
                  type: string
                  required: false
                  description: |
                    The custom description about the authorization failure.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1authorization~1fail/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - BAD_REQUEST
                          - LOCATION
                          - FORM
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation is to return to the client application.
                          Its format varies depending on the value of `action` parameter.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/authorization \
            -H 'Content-Type: application/json' \
            -u '10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE' \
            -d '{ "ticket": "c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q", "reason": "NOT_AUTHENTICATED" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            AuthorizationFailRequest req = new AuthorizationFailRequest();
            req.setTicket("c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q");
            req.setReason(AuthorizationFailRequest.Reason.NOT_AUTHENTICATED);

            api.authorizationFail(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            AuthorizationFailRequest req = new AuthorizationFailRequest();
            req.Ticket = "c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q";
            req.Reason = AuthorizationFailReason.NOT_AUTHENTICATED;

            await api.AuthorizationFail(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new AuthorizationFailRequest();
            $req.setTicket("c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q");
            $req.setReason(AuthorizationFailReason.$NOT_AUTHENTICATED);

            $api.authorizationFail($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::AuthorizationFailRequest.new
            req.ticket = 'c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q'
            req.reason = 'NOT_AUTHENTICATED'

            api.authorization_fail(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = AuthorizationFailRequest()
            req.ticket = 'c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q'
            req.reason = AuthorizationFailReason.NOT_AUTHENTICATED

            api.authorizationFail(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.AuthorizationFailRequest{}
            req.Ticket = "c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q"
            req.Reason = AuthorizationFailReason.NOT_AUTHENTICATED

            api.AuthorizationFail(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new AuthorizationFailRequest();
            req.ticket = 'c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q';
            req.reason = AuthorizationFailRequest.Reason.NOT_AUTHENTICATED;

            await api.authorizationFail(req);
      tags:
        - Authorization Endpoint
  /auth/authorization/issue:
    post:
      summary: /auth/authorization/issue API
      description: |
        This API parses request parameters of an authorization request and returns necessary data for the authorization server
        implementation to process the authorization request further.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the authorization endpoint of the service
        in order to generate a successful response to the client application.

        The description of the `/auth/authorization` API describes the timing when this API should be called and
        the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.

        The response from `/auth/authorization/issue` API has some parameters.
        Among them, it is `action` parameter that the authorization server implementation should check first
        because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".

        `responseContent` parameter contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since "500 Internal Server Error"
        is not required by OAuth 2.0.

        **BAD_REQUEST**

        When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted or expired)
        and that the reason of the invalidity was probably due to the end-user's too-delayed response to the authorization UI.

        The HTTP status of the response returned to the client application should be "400 Bad Request"
        and the content type should be `application/json` although OAuth 2.0 specification does not mention the format of the error response.

        `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application since "400 Bad Request" is not required by OAuth 2.0.

        **LOCATION**

        When the value of `action` is `LOCATION`, it means that the response to the client application should be "302 Found" with `Location` header.

        `responseContent` contains a redirect URI which contains (1) an authorization code, an ID token and/or an access token (on success) or
        (2) an error code (on failure), so it can be used as the value of `Location` header.

        The following illustrates the response which the service implementation must generate and return to the client application.

        ```http
        HTTP/1.1 302 Found
        Location: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORM**

        When the value of `action` is `FORM`, it means that the response to the client application should be "200 OK" with an HTML
        which triggers redirection by JavaScript. This happens when the authorization request from the client contains `response_mode=form_post`
        request parameter.

        `responseContent` contains an HTML which satisfies the requirements of `response_mode=form_post`, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 200 OK
        Content-Type: text/html;charset=UTF-8
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - subject
              properties:
                ticket:
                  type: string
                  required: true
                  description: |
                    The ticket issued from Authlete `/auth/authorization` API.
                subject:
                  type: string
                  required: true
                  descriptoin: |
                    The subject (= a user account managed by the service) who has granted authorization to the client application.
                authTime:
                  type: string
                  required: false
                  description: |
                    The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
                acr:
                  type: string
                  required: false
                  description: The Authentication Context Class Reference performed for the end-user authentication.
                claims:
                  type: string
                  required: false
                  description: |
                    The claims of the end-user (= pieces of information about the end-user) in JSON format.
                    See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
                properties:
                  type: array
                  items:
                    $ref: '#/paths/~1auth~1token~1issue/post/requestBody/content/application~1json/schema/properties/properties/items'
                  required: false
                  description: Extra properties to associate with an access token and/or an authorization code.
                scopes:
                  type: array
                  items:
                    type: string
                  required: false
                  description: |
                    Scopes to associate with an access token and/or an authorization code.
                    If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
                sub:
                  type: string
                  required: false
                  description: |
                    The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
                    the value of the `subject` request parameter is used as the value of the `sub` claim.
                idHeaderParams:
                  type: string
                  required: false
                  description: |
                    JSON that represents additional JWS header parameters for ID tokens that may be issued based on the authorization request.
                    This property is available since Authlete 2.1.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1authorization~1issue/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - BAD_REQUEST
                          - LOCATION
                          - FORM
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation is to return to the client application.
                          Its format varies depending on the value of `action` parameter.
                      accessToken:
                        type: string
                        description: |
                          The newly issued access token. Note that an access token is issued from an authorization endpoint only
                          when `response_type` contains token.
                      accessTokenExpiresAt:
                        type: number
                        format: int64
                        description: |
                          The datetime at which the newly issued access token will expire. The value is represented in milliseconds
                          since the Unix epoch (1970-01-01).
                      accessTokenDuration:
                        type: number
                        format: int64
                        description: |
                          The duration of the newly issued access token in seconds.
                      idToken:
                        type: string
                        description: |
                          The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
                          when `response_type` contains `id_token`.
                      authorizationCode:
                        type: string
                        description: |
                          The newly issued authorization code. Note that an authorization code is issued only
                          when `response_type` contains code.
                      jwtAccessToken:
                        type: string
                        description: |
                          The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
                          this property is always set to `null`.

                          This is available since Authlete 2.1.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/authorization/issue \
            -H 'Content-Type: application/json' \
            -u '10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE' \
            -d '{ "ticket": "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc", "subject": "john" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            AuthorizationIssueRequest req = new AuthorizationIssueRequest()
            req.setTicket("FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc");
            req.setSubject("john");

            api.authorizationIssue(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = new AuthletePropertiesConfiguration();
            IAuthleteApi api = new AuthleteApi(conf);

            AuthorizationIssueRequest req = new AuthorizationIssueRequest();
            req.Ticket  = "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc";
            req.Subject = "john";

            await api.AuthorizationIssue(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new AuthorizationIssueRequest();
            $req.setTicket("FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc");
            $req.setSubject("john");

            $api.authorizationIssue($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::AuthorizationIssueRequest.new
            req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc'
            req.subject = 'john'

            api.authorization_issue(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = AuthorizationIssueRequest()
            req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc'
            req.subject = 'john'

            api.authorizationIssue(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.AuthorizationIssueRequest{}
            req.Ticket = "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc"
            req.Subject = "john"

            api.AuthorizationIssue(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new AuthorizationIssueRequest();
            req.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc';
            req.subjec = 'john';

            await api.authorizationIssue(req);
      tags:
        - Authorization Endpoint
  /auth/token:
    post:
      summary: /auth/token API
      description: |
        This API parses request parameters of an authorization request and returns necessary data for the authorization server
        implementation to process the authorization request further.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from with the implementation of the token endpoint of the service. The endpoint implementation must
        extract the request parameters from the token request from the client application and pass them as the value of parameters request parameter
        to Authlete's `/auth/token` API.
        The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the token request.

        In addition, if the token endpoint of the authorization server implementation supports basic authentication as a means of
        [client authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3), the client credentials must be extracted from
        `Authorization` header and they must be passed as `clientId` request parameter and `clientSecret` request parameter to Authlete's `/auth/token` API.

        The following code snippet is an example in JAX-RS showing how to extract request parameters from the token request and client credentials
        from Authorization header.

        ```java
        @POST
        @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
        public Response post(
                @HeaderParam(HttpHeaders.AUTHORIZATION) String auth,
                String parameters)
        {
            // Convert the value of Authorization header (credentials of
            // the client application), if any, into BasicCredentials.
            BasicCredentials credentials = BasicCredentials.parse(auth);

            // The credentials of the client application extracted from
            // 'Authorization' header. These may be null.
            String clientId     = credentials == null ? null
                                : credentials.getUserId();
            String clientSecret = credentials == null ? null
                                : credentials.getPassword();

            // Process the given parameters.
            return process(parameters, clientId, clientSecret);
        }
        ```

        The response from `/auth/token` API has some parameters. Among them, it is action parameter that the service implementation should check first
        because it denotes the next action that the authorization server implementation should take. According to the value of action, the authorization
        server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".
        Authlete recommends `application/json` as the content type although OAuth 2.0 specification does not mention the format of the error response
        when the redirect URI is not usable.

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application
        since "500 Internal Server Error" is not required by OAuth 2.0.


        **INVALID_CLIENT**

        When the value of `action` is `INVALID_CLIENT`, it means that authentication of the client failed. In this case, the HTTP status of the response to
        the client application is either "400 Bad Request" or "401 Unauthorized". This requirement comes from [RFC 6749, 5.2. Error Response](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2).
        The description about `invalid_client` shown below is an excerpt from RFC 6749.

        Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).
        The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.
        If the client attempted to authenticate via the `Authorization` request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code
        and include the `WWW-Authenticate` response header field matching the authentication scheme used by the client.

        In either case, the value of `responseContent` is a JSON string which can be used as the entity body of the response to the client application.

        The following illustrate responses which the service implementation must generate and return to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```


        ```http
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {challenge}
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application is invalid.

        A response with HTTP status of "400 Bad Request" must be returned to the client application and the content type
        must be `application/json`.


        `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **OK**

        When the value of `action` is `OK`, it means that the request from the client application is valid and an access token, and optionally an ID token,
        is ready to be issued.

        The HTTP status of the response returned to the client application must be "200 OK" and the content type must be `application/json`.

        The parameter `responseContent` contains a JSON string which contains an access token (and optionally an ID token), so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation must generate and return to the client application.

        ```http
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  required: true
                  description: |
                    OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
                    implementation received from the client application.

                    The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
                    the client application.
                clientId:
                  type: string
                  required: false
                  description: |
                    The client ID extracted from `Authorization` header of the token request from the client application.

                    If the token endpoint of the authorization server implementation supports basic authentication as
                    a means of client authentication, and the request from the client application contained its client ID
                    in `Authorization` header, the value should be extracted and set to this parameter.
                clientSecret:
                  type: string
                  required: false
                  description: |
                    The client secret extracted from `Authorization` header of the token request from the client application.

                    If the token endpoint of the authorization server implementation supports basic authentication as a means of
                    client authentication, and the request from the client application contained its client secret in `Authorization` header,
                    the value should be extracted and set to this parameter.
                clientCertificate:
                  type: string
                  required: false
                  description: The client certificate from the MTLS of the token request from the client application.
                clientCertificatePath:
                  type: string
                  required: false
                  description: |
                    The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
                properties:
                  type: string
                  required: false
                  description: |
                    Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)
                    for details.
                dpop:
                  type: string
                  required: false
                  description: |
                    `DPoP` header presented by the client during the request to the token endpoint.

                    The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.

                    This property is available since Authlete 2.2.
                htm:
                  type: string
                  required: false
                  description: |
                    HTTP method of the token request. This field is used to validate the `DPoP` header.

                    In normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.

                    This property is available since Authlete 2.2.
                htu:
                  type: string
                  required: false
                  description: |
                    URL of the token endpoint. This field is used to validate the `DPoP` header.

                    If this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.

                    This property is available since Authlete 2.2.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1token/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - INVALID_CLIENT
                          - BAD_REQUEST
                          - PASSWORD
                          - OK
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation is to return to the client application.
                          Its format varies depending on the value of `action` parameter.
                      username:
                        type: string
                        description: |
                          The value of `username` request parameter in the token request.
                          The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
                          In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.

                          This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
                      password:
                        type: string
                        description: |
                          The value of `password` request parameter in the token request.
                          The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
                          In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.

                          This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
                      ticket:
                        type: string
                        description: |
                          The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.

                          This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
                      accessToken:
                        type: string
                        description: The newly issued access token.
                      accessTokenExpiresAt:
                        type: number
                        format: int64
                        description: |
                          The datetime at which the newly issued access token will expire.
                          The value is represented in milliseconds since the Unix epoch (1970-01-01).
                      accessTokenDuration:
                        type: number
                        format: int64
                        description: The duration of the newly issued access token in seconds.
                      refreshToken:
                        type: string
                        description: The newly issued refresh token.
                      refreshTokenExpiresAt:
                        type: number
                        format: int64
                        description: |
                          The datetime at which the newly issued refresh token will expire.
                          The value is represented in milliseconds since the Unix epoch (1970-01-01).
                      refreshTokenDuration:
                        type: number
                        format: int64
                        description: The duration of the newly issued refresh token in seconds.
                      idToken:
                        type: string
                        description: |
                          The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
                          of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
                      grantType:
                        type: string
                        description: The grant type of the token request.
                      clientId:
                        type: number
                        format: int64
                        description: The client ID.
                      clientIdAlias:
                        type: string
                        description: |
                          The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
                          Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
                      clientIdAliasUsed:
                        type: boolean
                        description: |
                          The flag which indicates whether the client ID alias was used when the token request was made.
                          `true` if the client ID alias was used when the token request was made.
                      subject:
                        type: string
                        description: |
                          The subject (= resource owner's ID) of the access token.
                          Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
                          [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
                          is not associated with any specific end-user.
                      scopes:
                        type: array
                        items:
                          type: string
                        description: The scopes covered by the access token.
                      properties:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token~1issue/post/requestBody/content/application~1json/schema/properties/properties/items'
                        description: |
                          The extra properties associated with the access token.
                          This parameter is `null` when no extra property is associated with the issued access token.
                      jwtAccessToken:
                        type: string
                        description: |
                          The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
                          (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the original random-string one.

                          This property is available since Authlete 2.1.
                      resources:
                        type: array
                        items:
                          type: string
                        description: |
                          The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.

                          This property is available since Authlete 2.2.
                      accessTokenResources:
                        type: array
                        items:
                          type: string
                        description: |
                          The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.

                          This property is available since Authlete 2.2.
                      authorizationDetails:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              description: |
                                The type of this element.

                                From _"OAuth 2.0 Rich Authorization Requests"_: _"The type of authorization data as a string.
                                This field MAY define which other elements are allowed in the request. This element is REQUIRED."_

                                This property is always not `null`.
                            locations:
                              type: array
                              items:
                                type: string
                              description: |
                                The resources and/or resource servers. This property may be `null`.

                                From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the location of
                                the resource or resource server. This is typically composed of URIs."_

                                This property may be `null`.
                            actions:
                              type: array
                              items:
                                type: string
                              description: |
                                The actions.

                                From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of actions
                                to be taken at the resource. The values of the strings are determined by the API being protected."_

                                This property may be `null`.
                            dataTypes:
                              type: array
                              items:
                                type: string
                              description: |
                                From _"OAuth 2.0 Rich Authorization Requests"_: _"An array of strings representing the kinds of data being requested
                                from the resource."_

                                This property may be `null`.
                            identifier:
                              type: string
                              description: |
                                The identifier of a specific resource.
                                From _"OAuth 2.0 Rich Authorization Requests"_: _"A string identifier indicating a specific resource available at the API."_

                                This property may be `null`.
                          additionalProperties:
                            type: any
                            description: Arbitrary field.
                        description: |
                          The authorization details. This represents the value of the `authorization_details` request parameter which is defined in "OAuth 2.0 Rich Authorization Requests".

                          When the `action` is `PASSWORD`, this property holds an array that represents the `authorization_details` request parameter included in the token request.
                          In other successful cases, this property holds the authorization details associated with the issued access token.

                          This property is available since Authlete 2.2.
                      serviceAttributes:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                        description: |
                          The attributes of this service that the client application belongs to.

                          This property is available since Authlete 2.2.
                      clientAttributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                              description: The key part.
                            value:
                              type: string
                              description: The value part.
                        description: |
                          The attributes of the client.

                          This property is available since Authlete 2.2.
        '400':
          description: |
            - TLS is not used.
            - The content of Authorization header is malformed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resultCode:
                    type: string
                    description: The code which represents the result of the API call.
                  resultMessage:
                    type: string
                    description: A short message which explains the result of the API call.
        '401':
          description: Authorization header is missing.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
        '403':
          description: |
            - The pair of API key & API secret specified in Authorization header is invalid.
            - The service owner or the service is locked.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/token \
            -H "Content-Type: application/json" \
            -u "10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE" \
            -d '{ "parameters": "grant_type=authorization_code&code=DkKMvKzrRAsWErsWCChNX_gydqqgA55AW2OJlXmNTQI&redirect_uri=https://api.authlete.com/api/mock/redirection/10167240235" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenRequest req = new TokenRequest();
            req.setParameters(...);
            req.setClientId("57297408867");
            req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

            api.token(req);
        - lang: cs
          label: C#
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenRequest req = new TokenRequest();
            req.setParameters(...);
            req.setClientId("57297408867");
            req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

            api.token(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new TokenRequest();
            $req.setParameters(...);
            $req.setClientId("57297408867");
            $req.setClientSecret("J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A");

            $api.token($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::TokenRequest.new
            req.parameters = '...'
            req.client_id = '57297408867'
            req.client_secret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

            api.token(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenRequest()
            req.parameters = ...
            req.clientId = '57297408867'
            req.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'

            api.token(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.TokenRequest{}
            req.Parameters = ...
            req.ClientId = "57297408867"
            req.ClientSecret = "J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A"

            api.Token(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new TokenRequest();
            req.parameters = ...;
            req.clientId = '57297408867';
            req.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A';

            await api.token(req);
      tags:
        - Token Endpoint
  /auth/token/fail:
    post:
      summary: /auth/token/fail API
      description: |
        This API generates a content of a successful token response that the authorization server implementation returns
        to the client application.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the token endpoint of the service in order to generate
        a successful response to the client application.

        The description of the `/auth/token` API describes the timing when this API should be called. See the description for
        the case of `action=PASSWORD`.

        The response from `/auth/token/fail` API has some parameters. Among them, it is `action` parameter that the authorization server
        mplementation should check first because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of action is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was
        wrong or that an error occurred in Authlete.

        In either case, from the viewpoint of the client application, it is an error on the server side. Therefore, the service
        implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application
        since "500 Internal Server Error" is not required by OAuth 2.0.

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that Authlete's `/auth/token/fail` API successfully generated an error response for the client application.

        The HTTP status of the response returned to the client application must be "400 Bad Request" and the content type must be `application/json`.

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - reason
              properties:
                ticket:
                  type: string
                  required: true
                  description: |
                    The ticket issued from Authlete `/auth/token` API.
                reason:
                  type: string
                  enum:
                    - UNKNOWN
                    - INVALID_RESOURCE_OWNER_CREDENTIALS
                    - INVALID_TARGET (Available since Authlete 2.2)
                  required: true
                  description: |
                    The reason of the failure of the token request.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1token~1fail/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - BAD_REQUEST
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation is to return to the client application.
                          Its format varies depending on the value of `action` parameter. See description for details.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/token/fail \
            -H "Content-Type: application/json" \
            -u "10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE" \
            -d '{ "ticket": "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c", "reason": "INVALID_RESOURCE_OWNER_CREDENTIALS" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenFailRequest req = new TokenFailRequest();
            req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");
            req.setReason(TokenFailRequest.Reason.INVALID_RESOURCE_OWNER_CREDENTIALS);

            api.tokenFail(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            TokenFailRequest req = new TokenFailRequest();
            req.Ticket = "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c";
            req.Reason = TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS;

            await api.TokenFail(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new TokenFailRequest();
            $req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");
            $req.setReason(TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS);

            $api.tokenFail($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::TokenFailRequest.new
            req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'
            req.reason = 'INVALID_RESOURCE_OWNER_CREDENTIALS'

            api.token_fail(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenFailRequest()
            req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'
            req.reason = TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS

            api.tokenFail(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.TokenFailRequest{}
            req.Ticket = "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c"
            req.Reason = TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS

            api.TokenFail(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new TokenFailRequest();
            req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c';
            req.reason = TokenFailRequest.Reason.INVALID_RESOURCE_OWNER_CREDENTIALS;

            await api.tokenFail(req);
      tags:
        - Token Endpoint
  /auth/token/issue:
    post:
      summary: /auth/token/issue API
      description: |
        This API generates a content of a successful token response that the authorization server implementation returns
        to the client application.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the token endpoint of the service in order to generate
        a successful response to the client application.

        The description of the `/auth/token` API describes the timing when this API should be called. See the description for
        the case of `action=PASSWORD`.

        The response from `/auth/token/issue` API has some parameters. Among them, it is `action` parameter that the authorization server
        mplementation should check first because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of action is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was
        wrong or that an error occurred in Authlete.

        In either case, from the viewpoint of the client application, it is an error on the server side. Therefore, the service
        implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        The endpoint implementation may return another different response to the client application
        since "500 Internal Server Error" is not required by OAuth 2.0.

        **OK**

        When the value of `action` is `OK`, it means that Authlete's `/auth/token/issue` API successfully generated an access token.

        The HTTP status of the response returned to the client application must be "200 OK" and the content type must be`application/json`.

        The parameter `responseContent` contains a JSON string which contains an access token, so it can be used as the entity body of
        the response.

        The following illustrates the response which the service implementation must generate and return to the client application.

        ```http
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket
                - subject
              properties:
                ticket:
                  type: string
                  required: true
                  description: |
                    The ticket issued from Authlete `/auth/token` API.
                subject:
                  type: string
                  required: true
                  descriptoin: |
                    The subject (= unique identifier) of the authenticated user.
                properties:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        description: The key part.
                      value:
                        type: string
                        description: The value part.
                      hidden:
                        type: boolean
                        description: |
                          The flag to indicate whether this property hidden from or visible to client applications.
                          If `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.
                  required: false
                  description: |
                    Extra properties to associate with a newly created access token. Note that properties parameter is accepted only
                    when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
                    if you want to specify properties.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1token~1issue/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - OK
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation is to return to the client application.
                          Its format is JSON.
                      username:
                        type: string
                        description: |
                          The value of `username` request parameter in the token request.
                          The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
                          In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.

                          This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
                      accessToken:
                        type: string
                        description: The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
                      accessTokenExpiresAt:
                        type: number
                        format: int64
                        description: |
                          The datetime at which the newly issued access token will expire.
                          The value is represented in milliseconds since the Unix epoch (1970-01-01).
                      accessTokenDuration:
                        type: number
                        format: int64
                        description: The duration of the newly issued access token in seconds.
                      refreshToken:
                        type: string
                        description: |
                          The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
                          If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
                          is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
                      refreshTokenExpiresAt:
                        type: number
                        format: int64
                        description: |
                          The datetime at which the newly issued refresh token will expire.
                          The value is represented in milliseconds since the Unix epoch (1970-01-01).
                      refreshTokenDuration:
                        type: number
                        format: int64
                        description: The duration of the newly issued refresh token in seconds.
                      clientId:
                        type: number
                        format: int64
                        description: The client ID.
                      clientIdAlias:
                        type: string
                        description: |
                          The client ID alias. If the client did not have an alias, this parameter is `null`.
                      clientIdAliasUsed:
                        type: boolean
                        description: |
                          The flag which indicates whether the client ID alias was used when the token request was made.
                          `true` if the client ID alias was used when the token request was made.
                      subject:
                        type: string
                        description: |
                          The subject (= resource owner's ID) of the access token.
                          Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
                          [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
                          the access token is not associated with any specific end-user.
                      scopes:
                        type: array
                        items:
                          type: string
                        description: The scopes covered by the access token.
                      properties:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token~1issue/post/requestBody/content/application~1json/schema/properties/properties/items'
                        description: |
                          The extra properties associated with the access token.
                          This parameter is `null` when no extra property is associated with the issued access token.
                      jwtAccessToken:
                        type: string
                        description: |
                          The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
                          (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
                          original random-string one.

                          This property is available since Authlete 2.1.
                      resources:
                        type: array
                        items:
                          type: string
                        description: |
                          The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.

                          This property is available since Authlete 2.2.
                      accessTokenResources:
                        type: array
                        items:
                          type: string
                        description: |
                          The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.

                          This property is available since Authlete 2.2.
                      authorizationDetails:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/authorizationDetails/items'
                        description: |
                          The authorization details. This represents the value of the `authorization_details` request parameter which is defined in "OAuth 2.0 Rich Authorization Requests".

                          This property is available since Authlete 2.2.
                      serviceAttributes:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                        description: |
                          The attributes of this service that the client application belongs to.

                          This property is available since Authlete 2.2.
                      clientAttributes:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                        description: |
                          The attributes of the client.

                          This property is available since Authlete 2.2.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/token/issue \
            -H "Content-Type: application/json" \
            -u "10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE" \
            -d '{ "ticket": "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            TokenIssueRequest req = new TokenIssueRequest()
            req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");

            api.tokenIssue(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            TokenIssueRequest req = new TokenIssueRequest();
            req.Ticket  = "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c";

            await api.TokenIssue(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new TokenIssueRequest();
            $req.setTicket("83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c");

            $api.tokenIssue($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::TokenIssueRequest.new
            req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'

            api.token_issue(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = TokenIssueRequest()
            req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'

            api.tokenIssue(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.TokenIssueRequest{}
            req.Ticket = "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c"

            api.TokenIssue(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new TokenIssueRequest();
            req.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c';

            await api.tokenIssue(req);
      tags:
        - Token Endpoint
  /auth/introspection:
    post:
      summary: /auth/intraspection API
      description: |
        This API gathers information about an access token.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementations of protected resource endpoints of the authorization server
        implementation in order to get information about the access token which was presented by the client application.

        In general, a client application accesses a protected resource endpoint of a service with an access token, and the implementation
        of the endpoint checks whether the presented access token has enough privileges (= scopes) to access the protected resource before
        returning the protected resource to the client application. To achieve this flow, the endpoint implementation has to know detailed
        information about the access token. Authlete `/auth/introspection` API can be used to get such information.

        The response from `/auth/introspection` API has some parameters. Among them, it is action parameter that the authorization server
        implementation should check first because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".
        Authlete recommends `application/json` as the content type although OAuth 2.0 specification does not mention the format of the error response
        when the redirect URI is not usable.

        The parameter `responseContent` contains a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage), so if the protected resource of the service implementation wants to return an error response to the client application
        in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration parameter of the service is Bearer), the value of `responseContent`
        can be used as the value of `WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application does not contain an access token
        (= the request from the authorization server implementation to Authlete does not contain `token` request parameter).

        A response with HTTP status of "400 Bad Request" must be returned to the client application and the content type
        must be `application/json`.


        The parameter `responseContent` contains a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage), so if the protected resource of the service implementation wants to return an error response to the client application
        in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration parameter of the service is `Bearer`), the value of `responseContent`
        can be used as the value of `WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.

        ```http
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist or has expired.

        The parameter `responseContent` contains a string which describes the error in the format of RFC 6750 (OAuth 2.0 Bearer Token Usage),
        so if the protected resource of the service implementation wants to return an error response to the client application in the way that
        complies with [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (in other words, if `accessTokenType` configuration parameter
        of the service is `Bearer`), the value of `responseContent` can be used as the value of `WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.

        ```http
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORBIDDEN**

        When the value of `action` is `FORBIDDEN`, it means that the access token does not cover the required scopes or that the subject
        associated with the access token is different from the subject contained in the request.

        A response with HTTP status of "400 Bad Request" must be returned to the client application and the content type
        must be `application/json`.

        The parameter `responseContent` contains a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage), so if the protected resource of the service implementation wants to return an error response to the client application
        in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration parameter of the service is Bearer), the value of `responseContent`
        can be used as the value of `WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.

        ```http
        HTTP/1.1 403 Forbidden
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **OK**

        When the value of `action` is `OK`, it means that the access token which the client application presented is valid (= exists and has not expired).

        The implementation of the protected resource endpoint is supposed to return the protected resource to the client application.

        When action is `OK`, the value of `responseContent` is `"Bearer error=\"invalid_request\""`. This is the simplest string which can be used as the
        value of `WWW-Authenticate` header to indicate "400 Bad Request". The implementation of the protected resource endpoint may use this string to tell
        the client application that the request was bad (e.g. in case necessary request parameters for the protected resource endpoint are missing).
        However, in such a case, the implementation should generate a more informative error message to help developers of client applications.

        The following is an example error response which complies with RFC 6750.

        ```http
        HTTP/1.1 200 OK
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        Basically, `responseContent` contains a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage). So, if the service has selected `Bearer` as the value of `accessTokenType` configuration parameter, the value of
        `responseContent` can be used directly as the value of `WWW-Authenticate` header. However, if the service has selected another different token type,
        the service has to generate error messages for itself.

        &nbsp;

        _**JWT-based access token**_

        Since version 2.1, Authlete provides a feature to issue access tokens in JWT format. This feature can be enabled by setting
        a non-null value to the `accessTokenSignAlg` property of the service (see the description of the Service class for details).
        `/api/auth/introspection` API can accept access tokens in JWT format. However, note that the API does not return information
        contained in a given JWT-based access token but returns information stored in the database record which corresponds to the given
        JWT-based access token. Because attributes of the database record can be modified after the access token is issued (for example,
        by using `/api/auth/token/update` API), information returned by `/api/auth/introspection` API and information the given JWT-based
        access token holds may be different.

        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  required: true
                  description: An access token to introspect.
                scopes:
                  type: string
                  required: false
                  description: |
                    A string array listing names of scopes which the caller (= a protected resource endpoint of the service) requires.
                    When the content type of the request from the service is `application/x-www-form-urlencoded`, the format of `scopes`
                    is a space-separated list of scope names.

                    If this parameter is a non-empty array and if it contains a scope which is not covered by the access token,`action=FORBIDDEN`
                    with `error=insufficient_scope` is returned from Authlete.
                subject:
                  type: string
                  required: false
                  description: |
                    A subject (= a user account managed by the service) whom the caller (= a protected resource endpoint of the service) requires.

                    If this parameter is not `null` and if the value does not match the subject who is associated with the access token,
                    `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
                clientCertificate:
                  type: string
                  required: false
                  description: |
                    Client certificate in PEM format, used to validate binding against access tokens using the TLS client certificate confirmation method.

                    This property is available since Authlete 2.0.
                dpop:
                  type: string
                  required: false
                  description: |
                    `DPoP` header presented by the client during the request to the resource server.

                    The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.

                    This property is available since Authlete 2.2.
                htm:
                  type: string
                  required: false
                  description: |
                    HTTP method of the request from the client to the protected resource endpoint. This field is used to validate the `DPoP` header.

                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.

                    This property is available since Authlete 2.2.
                htu:
                  type: string
                  required: false
                  description: |
                    URL of the protected resource endpoint. This field is used to validate the `DPoP` header.

                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.

                    This property is available since Authlete 2.2.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1introspection/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - BAD_REQUEST
                          - UNAUTHORIZED
                          - FORBIDDEN
                          - OK
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
                      clientId:
                        type: number
                        format: int64
                        description: The client ID.
                      clientIdAlias:
                        type: string
                        description: |
                          The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
                          Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
                      clientIdAliasUsed:
                        type: boolean
                        description: |
                          The flag which indicates whether the client ID alias was used when the token request was made.
                          `true` if the client ID alias was used when the token request was made.
                      expiresAt:
                        type: number
                        format: int64
                        description: |
                          The time at which the access token expires.
                          The value is represented in milliseconds since the Unix epoch (1970-01-01).
                      subject:
                        type: string
                        description: |
                          The subject who is associated with the access token.
                          The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
                      scopes:
                        type: array
                        items:
                          type: string
                        description: |
                          The scopes covered by the access token.
                      existent:
                        type: boolean
                        description: |
                          `true` if the access token exists.
                      usable:
                        type: boolean
                        description: |
                          true` if the access token is usable (= exists and has not expired).
                      sufficient:
                        type: boolean
                        description: |
                          `true` if the access token exists.
                      refreshable:
                        type: boolean
                        description: |
                          `true` if the access token can be refreshed using the associated refresh token which had been issued
                          along with the access token. `false` if the refresh token for the access token has expired or the access
                          token has no associated refresh token.
                      properties:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token~1issue/post/requestBody/content/application~1json/schema/properties/properties/items'
                        description: The extra properties associated with the access token.
                      certificateThumbpint:
                        type: string
                        description: |
                          The client certificate thumbprint used to validate the access token.

                          This property is available since Authlete 2.0.
                      resources:
                        type: array
                        items:
                          type: string
                        description: |
                          The target resources. This represents the resources specified by the `resource` request parameters
                          or by the `resource` property in the request object.

                          See "Resource Indicators for OAuth 2.0" for details.

                          This property is available since Authlete 2.2.
                      accessTokenResources:
                        type: array
                        items:
                          type: string
                        description: |
                          The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.

                          In some flows, the initial request and the subsequent token request are sent to different endpoints.
                          Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
                          In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
                          The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
                          set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
                          `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.

                          See "Resource Indicators for OAuth 2.0" for details.

                          This property is available since Authlete 2.2.
                      authorizationDetails:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/authorizationDetails/items'
                        description: |
                          The authorization details. This represents the value of the `authorization_details` request parameter which is defined in
                          "OAuth 2.0 Rich Authorization Requests".

                          This property is available since Authlete 2.2.
                      serviceAttributes:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                        description: |
                          The attributes of this service that the client application belongs to.

                          This property is available since Authlete 2.2.
                      clientAttributes:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                        description: |
                          The attributes of the client.

                          This property is available since Authlete 2.2.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/introspection \
            -H 'Content-Type:application/json' \
            -u '10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE' \
            -d '{ "token": "VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            IntrospectionRequest req = new IntrospectionRequest();
            req.setToken("VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI");

            api.introspection(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            IntrospectionRequest req = new IntrospectionRequest();
            req.Token = "VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI";

            await api.Introspection(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new IntrospectionRequest();
            $req.setToken("VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI");

            $api.introspection($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::IntrospectionRequest.new
            req.token = 'VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI'

            api.introspection(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = IntrospectionRequest()
            req.token = 'VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI'

            api.introspection(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.IntrospectionRequest{}
            req.Token = "VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI"

            api.Introspection(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new IntrospectionRequest();
            req.token = 'VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI';

            await api.introspection(req);
      tags:
        - Introspection Endpoint
  /auth/introspection/standard:
    post:
      summary: /auth/intraspection/standard API
      description: |
        This API exists to help your authorization server provide its own introspection API which complies with
        [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementations of the introspection endpoint of your service.
        The authorization server implementation should retrieve the value of action from the response and take the following
        steps according to the value.

        In general, a client application accesses a protected resource endpoint of a service with an access token, and the implementation
        of the endpoint checks whether the presented access token has enough privileges (= scopes) to access the protected resource before
        returning the protected resource to the client application. To achieve this flow, the endpoint implementation has to know detailed
        information about the access token. Authlete `/auth/introspection` API can be used to get such information.

        The response from `/auth/introspection` API has some parameters. Among them, it is action parameter that the authorization server
        implementation should check first because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.

        In either case, from the viewpoint of the client application, it is an error on the server side. Therefore, the service implementation
        should generate a response to the client application with HTTP status of "500 Internal Server Error".

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response
        if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
        body of error responses.

        The following illustrates an example response which the introspection endpoint of the authorization server implementation generates
        and returns to the client application.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application is invalid. This happens when the
        request from the client did not include the token request parameter. See "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)"
        in RFC 7662 for details about requirements for introspection requests.

        The HTTP status of the response returned to the client application should be "400 Bad Request".

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response
        if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
        body of error responses.

        The following illustrates an example response which the introspection endpoint of the authorization server implementation generates
        and returns to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json

        {responseContent}
        ```

        **OK**

        When the value of `action` is `OK`, the request from the client application is valid.

        The HTTP status of the response returned to the client application must be "200 OK" and its content type must be `application/json`.

        The parameter `responseContent` contains a JSON string which complies with the introspection response defined in
        "2.2. Introspection Response" in RFC7662.

        The following illustrates the response which the introspection endpoint of your authorization server implementation should
        generate and return to the client application.

        ```http
        HTTP/1.1 200 OK
        Content-Type: application/json

        {responseContent}
        ```

        &nbsp;

        Note that RFC 7662 says _"To prevent token scanning attacks, **the endpoint MUST also require some form of authorization to access this endpoint**"_.
        This means that you have to protect your introspection endpoint in some way or other. Authlete does not care about how your introspection endpoint
        is protected. In most cases, as mentioned in RFC 7662, "401 Unauthorized" is a proper response when an introspection request does not satisfy authorization
        requirements imposed by your introspection endpoint.

        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  required: true
                  description: |
                    Request parameters which comply with the introspection request defined
                    in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in RFC 7662.

                    The implementation of the introspection endpoint of your authorization server will receive an HTTP POST
                    [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters in the `application/x-www-form-urlencoded`
                    format. It is the entity body of the request that Authlete's  `/api/auth/introspection/standard` API expects
                    as the value of `parameters`.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1introspection~1standard/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - BAD_REQUEST
                          - OK
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation is to return to the client application.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/introspection/standard \
            -H "Content-Type:application/json" \
            -u '10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE' \
            -d '{ "parameters":"token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            StandardIntrospectionRequest req = new StandardIntrospectionRequest();
            req.setParameters(...);

            api.standardIntrospection(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            StandardIntrospectionRequest req = new StandardIntrospectionRequest();
            req.Parameters = ...;

            await api.StandardIntrospection(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new StandardIntrospectionRequest();
            $req.setParameters(...);

            $api.standardIntrospection($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::StandardIntrospectionRequest.new
            req.parameters = '...'

            api.standard_introspection(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = StandardIntrospectionRequest()
            req.parameters = ...

            api.standardIntrospection(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.StandardIntrospectionRequest{}
            req.Parameters = ...

            api.StandardIntrospection(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new StandardIntrospectionRequest();
            req.parameters = ...;

            await api.standardIntrospection(req);
      tags:
        - Introspection Endpoint
  /auth/revocation:
    post:
      summary: /auth/revocation API
      description: |
        This API revokes access tokens and refresh tokens.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the revocation endpoint ([RFC 7009](tools.ietf.org/html/rfc7009))
        of the authorization server implementation in order to revoke access tokens and refresh tokens.

        The response from `/auth/revocation` API has some parameters. Among them, it is `action` parameter that the authorization server
        implementation should check first because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the authorization server implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 500 Internal Server Error
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **INVALID_CLIENT**

        When the value of action is `INVALID_CLIENT`, it means that authentication of the client failed. In this case, the HTTP status of the response
        to the client application is either "400 Bad Request" or "401 Unauthorized". The description about `invalid_client` shown below is an excerpt
        from [RFC 6749](https://datatracker.ietf.org/doc/html/rfc6749).

        `invalid_client`

        > Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method). The authorization
        server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported. If the client attempted to
        authenticate via the `Authorization` request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and
        include the `WWW-Authenticate` response header field matching the authentication scheme used by the client.

        In either case, the value of `responseContent` is a JSON string which can be used as the entity body of the response to the client application.

        The following illustrates the response which the service implementation should generate and return to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```


        ```http
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {challenge}
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application is invalid.

        The HTTP status of the response returned to the client application must be "400 Bad Request" and the content type must be `application/json`.
        [RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009), [2.2.1. Error Respons](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2.1)
        states "The error presentation conforms to the definition in [Section 5.2](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2) of
        [[RFC 6749](https://datatracker.ietf.org/doc/html/rfc6749)]."

        The parameter `responseContent` contains a JSON string which describes the error, so it can be used as the entity body of the response.

        The following illustrates the response which the authorization server implementation should generate and return to the client application.

        ```http
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```

        **OK**

        When the value of action is `OK`, it means that the request from the client application is valid and the presented token has been revoked
        successfully or if the client submitted an invalid token. Note that invalid tokens do not cause an error.
        See [2.2. Revocation Response](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2) for details.

        The HTTP status of the response returned to the client application must be 200 OK.

        If the original request from the client application contains callback request parameter and its value is not empty, the content type should be
        `application/javascript` and the content should be a JavaScript snippet for JSONP.

        The parameter `responseContent` contains a JavaScript snippet if the original request from the client application contains callback request parameter
        and its value is not empty. Otherwise, the value of `responseContent` is `null`.

        ```http
        HTTP/1.1 200 OK
        Content-Type: application/javascript
        Cache-Control: no-store
        Pragma: no-cache

        {responseContent}
        ```
        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - parameters
              properties:
                parameters:
                  type: string
                  required: true
                  description: |
                    OAuth 2.0 token revocation request parameters which are the request parameters that the OAuth 2.0 token revocation endpoint
                    ([RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization server implementation received from the
                    client application.

                    The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request
                    from the client application.
                clientId:
                  type: string
                  required: false
                  description: |
                    The client ID extracted from `Authorization` header of the revocation request from the client application.

                    If the revocation endpoint of the authorization server implementation supports Basic Authentication
                    as a means of client authentication, and the request from the client application contains its client ID in
                    `Authorization` header, the value should be extracted and set to this parameter.
                clientSecret:
                  type: string
                  required: false
                  description: |
                    The client secret extracted from `Authorization` header of the revocation request from the client application.

                    If the revocation endpoint of the authorization server implementation supports basic authentication as a means of
                    client authentication, and the request from the client application contained its client secret in `Authorization` header,
                    the value should be extracted and set to this parameter.
                clientCertificate:
                  type: string
                  required: false
                  description: |
                    The client certificate used in the TLS connection between the client application and the revocation endpoint.
                clientCertificatePath:
                  type: string
                  required: false
                  description: |
                    The certificate path presented by the client during client authentication.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1revocation/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - INVALID_CLIENT
                          - BAD_REQUEST
                          - OK
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation is to return to the client application.
                          Its format varies depending on the value of `action` parameter.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/revocation \
            -H 'Content-Type:application/json' \
            -u '10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE' \
            -d '{ "parameters": "token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            RevocationRequest req = new RevocationRequest();
            request.setParameters(...);

            api.revocation(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            RevocationRequest req = new RevocationRequest();
            req.Parameters = ...;

            await api.Revocation(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new RevocationRequest();
            $req.setParameters(...);

            $api.revocation($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::RevocationRequest.new
            req.parameters = '...'

            api.revocation(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = RevocationRequest()
            req.parameters = ...

            api.revocation(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.RevocationRequest{}
            req.Parameters = ...

            api.Revocation(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new RevocationRequest();
            req.parameters = ...;

            await api.revocation(req);
      tags:
        - Revocation Endpoint
  /auth/userinfo:
    post:
      summary: /auth/userinfo API
      description: |
        This API gathers information about a user.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        of the authorization server in order to get information about the user that is associated with an access token.

        The response from `/auth/userinfo` API has various parameters. Among them, it is `action` parameter that the authorization server
        implementation should check first because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the service implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".

        The parameter `responseContent` returns a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.
        Note that OpenID Connect Core 1.0 requires that an error response from userinfo endpoint comply with RFC 6750.
        See [5.3.3. UserInfo Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.


        ```http
        HTTP/1.1 500 Internal Server Error
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application does not contain an access token
        (= the request from the authorization server implementation to Authlete does not contain `token` parameter).

        The parameter `responseContent` returns a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.
        Note that OpenID Connect Core 1.0 requires that an error response from userinfo endpoint comply with RFC 6750.
        See [5.3.3. UserInfo Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```http
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has expired, or is not
        associated with any subject (= any user account).

        The parameter `responseContent` returns a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.
        Note that OpenID Connect Core 1.0 requires that an error response from userinfo endpoint comply with RFC 6750.
        See [5.3.3. UserInfo Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```http
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORBIDDEN**

        When the value of `action` is `FORBIDDEN`, it means that the access token does not include the `openid` scope.

        The parameter `responseContent` returns a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.
        Note that OpenID Connect Core 1.0 requires that an error response from userinfo endpoint comply with RFC 6750.
        See [5.3.3. UserInfo Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```http
        HTTP/1.1 403 Forbidden
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **OK**

        When the value of `action` is `OK`, it means that the access token which the client application presented is valid.
        To be concrete, it means that the access token exists, has not expired, includes the openid scope, and is associated
        with a subject (= a user account).

        What the userinfo endpoint implementation should do next is to collect information about the subject (user) from your database.
        The value of the `subject` is contained in the subject parameter in the response from this API and the names of data, i.e., the
        claims names are contained in the claims parameter in the response. For example, if the `subject` parameter is `joe123` and the
        claims parameter is `[ "given_name", "email" ]`, you need to extract information about joe123's given name and email from your database.

        Then, call Authlete's `/auth/userinfo/issue` API with the collected information and the access token in order to make Authlete
        generate an ID token.

        If an error occurred during the above steps, generate an error response to the client. The response should comply with
        [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750).
        For example, if the subject associated with the access token does not exist in your database any longer, you may feel like generating
        a response like below.

        ```http
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: Bearer error="invalid_token",
         error_description="The subject associated with the access token does not exist."
        Cache-Control: no-store
        Pragma: no-cache
        ```

        Also, an error might occur on database access. If you treat the error as an internal server error, then the response would be
        like the following.

        ```http
        HTTP/1.1 500 Internal Server Error
        WWW-Authenticate: Bearer error="server_error",
         error_description="Failed to extract information about the subject from the database."
        Cache-Control: no-store
        Pragma: no-cache
        ```

        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  required: true
                  description: |
                    An access token.
                clientCertificate:
                  type: string
                  required: false
                  description: |
                    Client certificate used in the TLS connection established between the client application and the userinfo endpoint.

                    The value of this request parameter is referred to when the access token given to the userinfo endpoint was bound to
                    a client certificate when it was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]
                    (https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of certificate-bound access tokens.

                    This property is available since Authlete 2.1.
                dpop:
                  type: string
                  required: false
                  description: |
                    `DPoP` header presented by the client during the request to the user info endpoint.

                    The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.

                    This property is available since Authlete 2.2.
                htm:
                  type: string
                  required: false
                  description: |
                    HTTP method of the user info request. This field is used to validate the DPoP header.
                    In normal cases, the value is either `GET` or `POST`.

                    This property is available since Authlete 2.2.
                htu:
                  type: string
                  required: false
                  description: |
                    URL of the user info endpoint. This field is used to validate the DPoP header.

                    If this parameter is omitted, the `userInfoEndpoint` property of the service is used as the default value.
                    See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
                    for details.

                    This property is available since Authlete 2.2.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1userinfo/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - BAD_REQUEST
                          - UNAUTHORIZED
                          - FORBIDDEN
                          - OK
                        description: The next action that the authorization server implementation should take.
                      claims:
                        type: array
                        items:
                          type: string
                        description: |
                          The list of claims that the client application requests to be embedded in the ID token.
                      clientId:
                        type: string
                        required: false
                        description: |
                          The ID of the client application which is associated with the access token.
                      clientIdAlias:
                        type: string
                        description: |
                          The client ID alias when the authorization request for the access token was made.
                      clientIdAliasUsed:
                        type: boolean
                        description: |
                          The flag which indicates whether the client ID alias was used when the authorization request for the access token was made.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
                      scopes:
                        type: array
                        items:
                          type: string
                        description: |
                          The scopes covered by the access token.
                      subject:
                        type: string
                        description: |
                          The subject (= resource owner's ID).
                      token:
                        type: string
                        description: |
                          The access token that came along with the userinfo request.
                      properties:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token~1issue/post/requestBody/content/application~1json/schema/properties/properties/items'
                        description: |
                          The extra properties associated with the access token.
                      userInfoClaims:
                        type: string
                        description: |
                          The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in an authorization request object.

                          A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
                          There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
                          In both cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
                          Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).

                          The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.

                          ```json
                          {
                            "userinfo":
                            {
                              "given_name": { "essential": true },
                              "nickname": null,
                              "email": { "essential": true },
                              "email_verified": { "essential": true },
                              "picture": null,
                              "http://example.info/claims/groups": null
                            },
                            "id_token":
                            {
                              "auth_time": { "essential": true },
                              "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
                            }
                          }
                          ````

                          The value of this property is the value of the `userinfo` property in JSON format.
                          For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.

                          ```json
                          {
                            "given_name": { "essential": true },
                            "nickname": null,
                            "email": { "essential": true },
                            "email_verified": { "essential": true },
                            "picture": null,
                            "http://example.info/claims/groups": null
                          }
                          ```

                          Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
                          the value of this property holds the former value.

                          This property is available since Authlete 2.2.
                      serviceAttributes:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                        description: |
                          The attributes of this service that the client application belongs to.

                          This property is available since Authlete 2.2.
                      clientAttributes:
                        type: array
                        items:
                          $ref: '#/paths/~1auth~1token/post/responses/200/content/application~1json/schema/allOf/1/properties/clientAttributes/items'
                        description: |
                          The attributes of the client.

                          This property is available since Authlete 2.2.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/userinfo \
            -H 'Content-Type:application/json' \
            -u '10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE' \
            -d '{ "token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            UserInfoRequest req = new UserInfoRequest();
            req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

            api.userinfo(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            UserInfoRequest req = new UserInfoRequest();
            req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI";

            await api.Userinfo(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new UserInfoRequest();
            $req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

            $api.userinfo($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::UserInfoRequest.new
            req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

            api.user_info(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = UserInfoRequest()
            req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

            api.userinfo(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.UserInfoRequest{}
            req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI"

            api.Userinfo(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new UserInfoRequest();
            req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI';

            await api.userInfo(req);
      tags:
        - UserInfo Endpoint
  /auth/userinfo/issue:
    post:
      summary: /auth/userinfo/issue API
      description: |
        This API generates an ID token.

        <br>
        <details>
        <summary>Description</summary>

        This API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        of the authorization server in order to generate an ID token. Before calling this API, a valid response from `/auth/userinfo` API must be obtained.
        Then, call this API with the access token contained in the response and the claims values of the user (subject) associated with the access token.
        See **OK** written in the description of `/auth/userinfo` API for details.

        The response from `/auth/userinfo/issue` API has various parameters. Among them, it is `action` parameter that the authorization server
        implementation should check first because it denotes the next action that the authorization server implementation should take.
        According to the value of `action`, the service implementation must take the steps described below.

        **INTERNAL_SERVER_ERROR**

        When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization server implementation was wrong
        or that an error occurred in Authlete.
        In either case, from the viewpoint of the client application, it is an error on the server side.
        Therefore, the service implementation should generate a response to the client application with HTTP status of "500 Internal Server Error".

        The parameter `responseContent` returns a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.
        Note that OpenID Connect Core 1.0 requires that an error response from userinfo endpoint comply with RFC 6750.
        See [5.3.3. UserInfo Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.


        ```http
        HTTP/1.1 500 Internal Server Error
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **BAD_REQUEST**

        When the value of `action` is `BAD_REQUEST`, it means that the request from the client application does not contain an access token
        (= the request from the authorization server implementation to Authlete does not contain `token` parameter).

        The parameter `responseContent` returns a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.
        Note that OpenID Connect Core 1.0 requires that an error response from userinfo endpoint comply with RFC 6750.
        See [5.3.3. UserInfo Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```http
        HTTP/1.1 400 Bad Request
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **UNAUTHORIZED**

        When the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has expired, or is not
        associated with any subject (= any user account).

        The parameter `responseContent` returns a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.
        Note that OpenID Connect Core 1.0 requires that an error response from userinfo endpoint comply with RFC 6750.
        See [5.3.3. UserInfo Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```http
        HTTP/1.1 401 Unauthorized
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **FORBIDDEN**

        When the value of `action` is `FORBIDDEN`, it means that the access token does not include the `openid` scope.

        The parameter `responseContent` returns a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)
        (OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate` header.

        The following is an example response which complies with RFC 6750.
        Note that OpenID Connect Core 1.0 requires that an error response from userinfo endpoint comply with RFC 6750.
        See [5.3.3. UserInfo Response](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.

        ```http
        HTTP/1.1 403 Forbidden
        WWW-Authenticate: {responseContent}
        Cache-Control: no-store
        Pragma: no-cache
        ```

        **JSON**

        When the value of `action` is `JSON`, it means that the access token which the client application presented is valid and an ID token was
        successfully generated in the format of JSON.

        The userinfo endpoint implementation is expected to generate a response to the client application. The content type of the response must
        be `application/json` and the response body must be an ID token in JSON format.

        The parameter `responseContent` contains the ID token in JSON format when `action` is `JSON`, so a response to the client can be built like below.

        ```http
        HTTP/1.1 200 OK
        Cache-Control: no-store
        Pragma: no-cache
        Content-Type: application/json;charset=UTF-8

        {responseContent}
        ```

        **JWT**

        When the value of `action` is `JWT`, it means that the access token which the client application presented is valid and an ID token was successfully
        generated in the format of JWT (JSON Web Token) ([RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519)).

        The userinfo endpoint implementation is expected to generate a response to the client application. The content type of the response must be
        `application/jwt` and the response body must be an ID token in JWT format.

        The parameter `responseContent` contains the ID token in JSON format when `action` is `JWT`, so a response to the client can be built like below.

        ```http
        HTTP/1.1 200 OK
        Cache-Control: no-store
        Pragma: no-cache
        Content-Type: application/jwt

        {responseContent}
        ```

        </details>
      security:
        - ServiceCedentials: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  required: true
                  description: |
                    The access token that has been passed to the userinfo endpoint by the client application. In other words,
                    the access token which was contained in the userinfo request.
                claims:
                  type: string
                  required: false
                  description: |
                    Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).
                sub:
                  type: string
                  required: false
                  description: |
                    The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of
                    the `sub` claim. Otherwise, the value of the subject associated with the access token is used.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/paths/~1auth~1userinfo~1issue/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1auth~1token/post/responses/400/content/application~1json/schema'
                  - type: object
                    properties:
                      action:
                        type: string
                        enum:
                          - INTERNAL_SERVER_ERROR
                          - BAD_REQUEST
                          - UNAUTHORIZED
                          - FORBIDDEN
                          - JSON
                          - OK
                        description: The next action that the authorization server implementation should take.
                      responseContent:
                        type: string
                        description: |
                          The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
        '400':
          $ref: '#/paths/~1auth~1token/post/responses/400'
        '401':
          $ref: '#/paths/~1auth~1token/post/responses/401'
        '403':
          $ref: '#/paths/~1auth~1token/post/responses/403'
      operationId: ''
      x-code-samples:
        - lang: shell
          label: curl
          source: |
            curl -v -X POST https://api.authlete.com/api/auth/userinfo/issue \
            -H 'Content-Type:application/json' \
            -u '10167240235:LFpGEwpyHKNYMeMHg-H339X8gXdVlix-GoCHQAjAMaE' \
            -d '{ "token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI" }'
        - lang: java
          label: java
          source: |
            AuthleteConfiguration conf = ...;
            AuthleteApi api = AuthleteApiFactory.create(conf);

            UserInfoIssueRequest req = new UserInfoIssueRequest();
            req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

            api.userinfoIssue(req);
        - lang: cs
          label: C#
          source: |
            IAuthleteConfiguration conf = ...;
            IAuthleteApi api = new AuthleteApi(conf);

            UserInfoIssueRequest req = new UserInfoIssueRequest();
            req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI";

            await api.UserinfoIssue(req);
        - lang: php
          label: PHP
          source: |
            $conf = ...;
            $api = new AuthleteApiImpl($conf);

            $req = new UserInfoIssueRequest();
            $req.setToken("Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI");

            $api.userinfoIssue($req);
        - lang: ruby
          source: |
            conf = ...
            api = Authlete::Api.new(conf)

            req = Authlete::Model::Request::UserInfoIssueRequest.new
            req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

            api.user_info_issue(req)
        - lang: python
          source: |
            conf = ...
            api = AuthleteApiImpl(conf)

            req = UserInfoIssueRequest()
            req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'

            api.userinfoIssue(req)
        - lang: go
          source: |
            conf := ...
            api := api.New(&conf)

            req := dto.UserInfoIssueRequest{}
            req.Token = "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI"

            api.UserinfoIssue(&req)
        - lang: ts
          label: deno
          source: |
            const conf: AuthleteConfiguration = ...;
            const api: AuthleteApi = new AuthleteApiImpl(conf);

            const req = new UserInfoIssueRequest();
            req.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI';

            await api.userInfoIssue(req);
      tags:
        - UserInfo Endpoint
components:
  securitySchemes:
    ServiceCedentials:
      type: http
      scheme: basic
      description: Set service API key as **Username** and service API secret as **Password**.
tags:
  - name: Authorization Endpoint
  - name: Token Endpoint
  - name: Introspection Endpoint
  - name: Revocation Endpoint
  - name: UserInfo Endpoint
